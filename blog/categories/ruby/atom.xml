<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Riding the Rails and Searching for Gems]]></title>
  <link href="http://denineguy.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://denineguy.github.io/"/>
  <updated>2014-09-22T16:00:09-04:00</updated>
  <id>http://denineguy.github.io/</id>
  <author>
    <name><![CDATA[Denine Guy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With Rails]]></title>
    <link href="http://denineguy.github.io/blog/2014/09/22/getting-started-with-rails/"/>
    <updated>2014-09-22T10:19:58-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/09/22/getting-started-with-rails</id>
    <content type="html"><![CDATA[<p><a href="http://guides.rubyonrails.org/">Rails</a> has rapidly become one of the most powerful frameworks for building dynamic web applications and it is written in the Ruby language. Today there are several startups that use Rails including GitHub, Shopify, Hulu,Quirky, Airbnb. There are also several web development companies that focus on Rails development, among those are Pivotal Labs and Thoughbot. One of the great things about Rails is that it is 100% open-source and as a result cost nothing to download.  The framework is designed to make building web applications easier by making assumptions about what every developer needs to get started and it allows you to write less code while accomplishing more than other languages and frameworks.</p>

<!-- more -->


<p>Rails follows two major guiding principles:</p>

<ol>
<li>DRY(Don&rsquo;t Repeat Yourself) &ndash; By not repeating the same code over and over again the code is more maintainable, extensibility and minimizes bugs</li>
<li>Convention over Configuration &ndash; Rails believe it has created the best ways to do many things in a web application and this it follow many conventions rather than having the developer set up many configuration files.</li>
</ol>


<h2>Let&rsquo;s get Started</h2>

<p>We are going to create a simple Blog Post. The first thing you need to do is set up your Rails environment.  You should have the following installed:</p>

<ol>
<li><a href="http://www.ocf.berkeley.edu/~kelu/interviews/questions.html">Ruby language</a></li>
<li><a href="http://rubygems.org/">Ruby Gem&rsquo;s packaging system</a></li>
<li><a href="http://www.sqlite.org/">SQLite3 Database</a></li>
</ol>


<p>Assuming that all of those have been downloaded successfully, you now need to install Rails. To install Rails you just type the following in your command line
<code>
  $ gem install rails
</code>
To ensure it is installed correctly run the following:
<code>
  $ bin/rails --version
</code>
The version should be 4.1.2 or greater</p>

<p>Once your environment is completely setup it is easy to set up a new Rails app. You would enter rails new and the name of the application in the command line.  Enter the following in your command line:</p>

<p><code>
  $ rails new blog
</code>
Rails will automatically run bundler for you, but go to your Gemfile and add any other Gems you wish to use.  After you have added them to your file run <code>bundle install</code> in the command line. Now cd into your new application and open it in your text editor.  You will see that Rails has auto-generated a number of files and folders for you. To get a full explanation and purpose for each file and folder checkout the <a href="http://guides.rubyonrails.org/getting_started.html">Rails Guides</a> for full documentation on it.</p>

<h2>Model-View-Controller</h2>

<p>Rails follows the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">model-view-controller(MVC)</a> pattern, which separates the applicaton behavior(business logic) from the input and the user interface. In our case business logic is the model for posts and comments while the user interface is the web page in the browser.</p>

<p>In essence for Rails applications when a browser sends a request it is received by the web server and then passed to the Rails controller, which determines what to do next.  In some cases the controller will render a view, an HTML template that gets sent back to the server.  In most cases, however, the controller will interact with the model, a Ruby object which is a component of the site(such as a post) and it will communicate with the database. After communicating with the database the controller will step in and render a view, the web page in HTML format.</p>

<p><img src="/images/mvc_image.png" title="A detailed diagram of MVC in Rails" alt="Rails MVC Diagram" /></p>

<h2>Models</h2>

<p>To get started we need to think about what we need for our application.  In our case we are creating a very simple blog and at a minimum we need to think about the posts for the blog and the comments. The posts should have a title and content.  The comment should have a commenter and content and post_id which is a foreign key to posts and this bascially states that the comment <code>belongs_to</code> a post.  In order to create your model you will write the following in your command line.</p>

<p><code>
  rails generate model Post title:string content:text
  rails generate model Comment content:text post_id:integer
</code></p>

<p>Somethings to note is that model is typically singular. After you write the name of the model(your object) you define the attributes of the object by writing it in the format attribute:type, where attribute is the title and type would be string, text, integer, boolean, date. The difference between string and text is that a string is for short text input usually 255 characters or less and text is user for more input like content which could potentially be more than 255 characters. After generating the models the following should be populated.</p>

<p>```
♥ rails generate model Post title:string content:text</p>

<pre><code>invoke  active_record
create    db/migrate/20140920155246_create_posts.rb
create    app/models/post.rb
invoke    test_unit
create      test/models/post_test.rb
create      test/fixtures/posts.yml
</code></pre>

<p>[11:52:47] blog
♥ rails generate model Comment content:text post_id:integer</p>

<pre><code>invoke  active_record
create    db/migrate/20140920155332_create_comments.rb
create    app/models/comment.rb
invoke    test_unit
create      test/models/comment_test.rb
create      test/fixtures/comments.yml
</code></pre>

<p>```</p>

<p>The model is responsible for creating your post and comment models as well as your migration files for both models. Let&rsquo;s look at the migrations.  Go to the <code>db/migrate</code> folder and you will see migration files for both <code>create_post.rb</code> and <code>create_comments.rb</code> with a timestamp in front of the name of the file. These files create your Active Record migration and basically setup the structure for the database table which are essentially the attributes for each model. You will see that Rails automatically adds a timestamp which will generate the created_at and updated_at fields in your database and tell you when a record has been added or updated to the database.</p>

<p>```ruby Post.rb
class CreatePosts &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :posts do |t|
  t.string :title
  t.text :content

  t.timestamps
end
</code></pre>

<p>  end
end  <br/>
```</p>

<p>```ruby Comment.rb
class CreateComments &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :comments do |t|
  t.string :commenter
  t.text :content
  t.integer :post_id

  t.timestamps
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>rails generate model, also creates your model files. If you go to your text editor in <code>app/models</code> you should now see a <code>post.rb</code> and <code>comment.rb</code> file. Both should look you have a class for the specific modes which inherits from ActiveRecord::Base.  In our models we need to tell Active Record how the models are associated with each other. To learn more about associations visit <a href="http://guides.rubyonrails.org/association_basics.html">Rails Active Record Association</a>.  This is how our foreign key will essentially work.  So let&rsquo;s think about this.  For any one post it is possible to have a lot of comments and a comment belongs to only one post.  We also want to make sure that a post has at least a title in order for it to be saved and a comment needs to have some content. We can do that by validating the presence of those attributes. Validations are covered in detail in <a href="http://guides.rubyonrails.org/active_record_validations.html">Rails Active Record Validations</a>.  So let&rsquo;s write the following associations in our model.</p>

<p><code>ruby Post.rb
class Post &lt; ActiveRecord::Base
  has_many :comments
  validates_presence_of :title
end
</code></p>

<p><code>ruby Comment.rb
class Comment &lt; ActiveRecord::Base
  belongs_to :post
  validates_presence_of :content
end
</code>
Now that we have our models and table configuration set up we now need to migrate the table to actually generate the database table.  In you command line run <code>rake db:migrate</code>
You should see that a create_table post and create_table comment were both generated. Visit <a href="http://guides.rubyonrails.org/migrations.html">Rails Database Migrations</a> for more information on Migrations</p>

<p>```ruby Rake db:migrate
♥ rake db:migrate
== 20140920155246 CreatePosts: migrating ======================================
&mdash; create_table(:posts)
   &ndash;> 0.0023s
== 20140920155246 CreatePosts: migrated (0.0024s) =============================</p>

<p>== 20140920155332 CreateComments: migrating ===================================
&mdash; create_table(:comments)
   &ndash;> 0.0012s
== 20140920155332 CreateComments: migrated (0.0013s) ==========================
```</p>

<p>Once your migration finishes a <code>schema.rb</code> will be generated. Go to you text editor and go to the folder <code>db\schema.rb</code>This will show the layout of your tables, which should look like the following.</p>

<p>```ruby Schema.rb
ActiveRecord::Schema.define(version: 20140920155332) do</p>

<p>  create_table &ldquo;comments&rdquo;, force: true do |t|</p>

<pre><code>t.string   "commenter"
t.text     "content"
t.integer  "post_id"
t.datetime "created_at"
t.datetime "updated_at"
</code></pre>

<p>  end</p>

<p>  create_table &ldquo;posts&rdquo;, force: true do |t|</p>

<pre><code>t.string   "title"
t.text     "content"
t.datetime "created_at"
t.datetime "updated_at"
</code></pre>

<p>  end</p>

<p>end
<code>
Now let's see what our website looks like so far.  In the command line start your rails server by entering</code>rails s<code>. Once that runs enter</code><a href="http://localhost:3000">http://localhost:3000</a>``` in your browser and you should see the following.</p>

<p><img src="/images/welcome_aboard_rails.png" title="Rails Default Information Page Welcome Aboard." alt="Rails Default Information Page" /></p>

<p>In the next section we will begin to render our application in the browser</p>

<h2>Controllers</h2>

<p>In order to begin to render the application on the page you need at least a controller and a view. For our application we will need to create a Post Controller and a Comments Controller.
As we discussed previously the controllers purpose is to recieve specific request from the application.  The routers purpose is to decide which controller recieves which request.  Each action&rsquo;s purpose is to collect  information to provide it to a view. A view&rsquo;s purpose is to display this information in a human readable format. View templates are written in a language called eRuby (Embedded Ruby).</p>

<p>To create your controllers you need to enter <code>rails g controller Posts</code> and <code>rails g controller Comments</code>.  Notice that unlike your models which are singular your controllers are plural.</p>

<p>``` ruby PostsController and CommentsController
♥ rails g controller Posts</p>

<pre><code>  create  app/controllers/posts_controller.rb
  invoke  erb
  create    app/views/posts
  invoke  test_unit
  create    test/controllers/posts_controller_test.rb
  invoke  helper
  create    app/helpers/posts_helper.rb
  invoke    test_unit
  create      test/helpers/posts_helper_test.rb
  invoke  assets
  invoke    coffee
  create      app/assets/javascripts/posts.js.coffee
  invoke    scss
  create      app/assets/stylesheets/posts.css.scss
</code></pre>

<p>[11:25:23] (master) blog
♥ rails g controller Comments</p>

<pre><code>  create  app/controllers/comments_controller.rb
  invoke  erb
  create    app/views/comments
  invoke  test_unit
  create    test/controllers/comments_controller_test.rb
  invoke  helper
  create    app/helpers/comments_helper.rb
  invoke    test_unit
  create      test/helpers/comments_helper_test.rb
  invoke  assets
  invoke    coffee
  create      app/assets/javascripts/comments.js.coffee
  invoke    scss
  create      app/assets/stylesheets/comments.css.scss
</code></pre>

<p><code>     
Generating controllers will create both your controller files and your view files.  If you go to your text editor and go to app/controllers you should now see a</code>comments_controller.rb<code>and</code>posts_controller.rb``` file, which both inherit from the Application Controller. If you go to app\views you will now see folders for comments and posts.</p>

<p><code>ruby posts_controller.rb
class PostsController &lt; ApplicationController
end
</code></p>

<p><code>ruby comments_controller.rb
class CommentsController &lt; ApplicationController
end
</code></p>

<h2>Routes</h2>

<p>We will now add routes to our application.  Please enter the following in your <code>routes.rb</code> file.</p>

<p>```ruby Routes.rb
Rails.application.routes.draw do
  resources :posts do</p>

<pre><code>resources :comments
</code></pre>

<p>  end
end
```
This creates comments as a nested resource within posts. This is another part of capturing the hierarchical relationship that exists between posts and comments. This basically states that comments will only be viewed through routes generated for posts.</p>

<p>Now you can enter <code>rake routes</code> and you should see the following.
```ruby Rake Routes
♥ rake routes</p>

<pre><code>       Prefix Verb   URI Pattern                                 Controller#Action
post_comments GET    /posts/:post_id/comments(.:format)          comments#index
              POST   /posts/:post_id/comments(.:format)          comments#create
</code></pre>

<p> new_post_comment GET    /posts/:post_id/comments/new(.:format)      comments#new
edit_post_comment GET    /posts/:post_id/comments/:id/edit(.:format) comments#edit</p>

<pre><code> post_comment GET    /posts/:post_id/comments/:id(.:format)      comments#show
              PATCH  /posts/:post_id/comments/:id(.:format)      comments#update
              PUT    /posts/:post_id/comments/:id(.:format)      comments#update
              DELETE /posts/:post_id/comments/:id(.:format)      comments#destroy
        posts GET    /posts(.:format)                            posts#index
              POST   /posts(.:format)                            posts#create
     new_post GET    /posts/new(.:format)                        posts#new
    edit_post GET    /posts/:id/edit(.:format)                   posts#edit
         post GET    /posts/:id(.:format)                        posts#show
              PATCH  /posts/:id(.:format)                        posts#update
              PUT    /posts/:id(.:format)                        posts#update
              DELETE /posts/:id(.:format)                        posts#destroy
</code></pre>

<p>```</p>

<p>The below graphic represents the implementation of the REST architecture in Rails and explains the URL, the controller action and purpose of each RESTful route.</p>

<p><img src="/images/routes_rest.png" title="Rails RESTful Routes Table." alt="Rails RESTful Routes Table" /></p>

<p>The root directory or home page will appear on localhost:3000.  To set the root directory to a view other than the default root directory, use  root :to => &lsquo;Controller#action&rsquo;.  You can set the root directory as a separtate landing page but for our application we will set the posts index page as the root directory by entering root :to => &ldquo;posts#index&rdquo; in  routes.rb.</p>

<p>```ruby Routes.rb
Rails.application.routes.draw do</p>

<p>  root :to => &ldquo;posts#index&rdquo;</p>

<p>  resources :posts do</p>

<pre><code>resources :comments
</code></pre>

<p>  end</p>

<p>end
<code>
In order to see anything on localhost:3000 we will now need to create our post#index view.  We do this by creating and</code>index.html.erb<code>file in the app/views/posts folder. In this view we will render all of our posts. We will use embedded ruby.  For now lets just write the following in the</code>index.html.erb``` file</p>

<p>```</p>

<h1>All Blog Posts</h1>


<p>```
if you go to localhost:3000 you should now see All Blog Posts displayed on your root page.</p>

<h2>CRUD Post and Comment Controllers</h2>

<p>We now need to completely set up our controllers so that we can add, edit, show and delete post and be able to create a comment. We will take care of these actions in our controller which will allow us to collect information and display the information in the view.  I will show what should go into each section and explain what it does and what view it will render.</p>

<p>Your Posts Controller should look like the following</p>

<p>```ruby posts_controller.rb
class PostsController &lt; ApplicationController
  before_action :set_post, only: [:show, :edit, :update, :destroy]</p>

<p>  # GET/posts
  # posts/index.html.erb which displays all posts
  def index</p>

<pre><code>@posts = Post.all
</code></pre>

<p>  end</p>

<p>  # GET /posts/new
  # posts/new.html.erb which shows and HTML form to create a new post
  def new</p>

<pre><code>@post = Post.new
</code></pre>

<p>  end</p>

<p>  # POST /posts
  # posts/index.html.erb<br/>
  # This saves information to the database after after new post is created from new.html.erb
  # redirects to index page where new post will appear
  def create</p>

<pre><code>@post = Post.new(post_params)

if @post.save
  redirect_to @post, notice: 'Post was successfully created.'
else
  render :new 
end
</code></pre>

<p>  end</p>

<p>  # GET /posts/1 <br/>
  #posts/show.html.erb
  # this will show an individual post for an newly created or updated post
  # will also contain the comment form to create a new comment and show comments
  def show</p>

<pre><code>@comment = Comment.new
</code></pre>

<p>  end</p>

<p>  # GET /posts/1/edit <br/>
  # edit.html.erb
  # This is an HTML form for editing a post
  def edit
  end</p>

<p>  # PATCH/PUT /posts/1
  # posts/show.html.erb
  # save the information from edit.html.erb to the database and updates a specific post
  # it will then render the show.html.erb page
  def update</p>

<pre><code>respond_to do |format|
  if @post.update(post_params)
    format.html { redirect_to @post, notice: 'Post was successfully updated.' }
    format.json { render :show, status: :ok, location: @post }
  else
    format.html { render :edit }
    format.json { render json: @post.errors, status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end</p>

<p>  # DELETE /posts/1
  # posts/show.html.erb
  # The deletes a specific post and removes it from the database
  def destroy</p>

<pre><code>@post.destroy
respond_to do |format|
  format.html { redirect_to posts_url, notice: 'Post was successfully destroyed.' }
  format.json { head :no_content }
end
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code># Use callbacks to share common setup or constraints between actions.
def set_post
  @post = Post.find(params[:id])
end

# Strong parameters, to only allow specific attributes to be updated and saved to database.
def post_params
  params.require(:post).permit(:title, :content)
end
</code></pre>

<p>end
```</p>

<p>Your Comments Controllers you should look like the following.  This will allow you to create a new comment and save it to the database and redirect you the comment for that post.</p>

<p>```ruby comments_controller.rb
def create</p>

<pre><code>@post = Post.find(params[:post_id])
@comment = @post.comments.build(comment_params)

if @comment.save
  redirect_to @comment.post
else
  redirect_to :back
end
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code>def comment_params
  params.require(:comment).permit(:commenter, :content)
end
</code></pre>

<p>```</p>

<h2>Views</h2>

<p>Now that the controllers and routes have been set up for the Posts and Comments the only thing
left to do now is to set up the view.  As stated before we will use the embedded ruby to create
the templates for all of the views that correspond to the controller actions.  You can see all of the views in the <a href="https://github.com/denineguy/blog">GitHub Repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Greedy Method - Solving the Apple Stock Algorithm]]></title>
    <link href="http://denineguy.github.io/blog/2014/09/11/the-greedy-method-solving-the-apple-stock-algorithm/"/>
    <updated>2014-09-11T17:30:27-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/09/11/the-greedy-method-solving-the-apple-stock-algorithm</id>
    <content type="html"><![CDATA[<p>Last week I had the pleasure of attending a Women Who Code NYC event focusing on Algorithms &amp;Interview Prep. The meetup provided a lot of great resources for interview prep and gave us all a chance to work on our whiteboarding skills. One of the questions we came across was regarding   Apple Stock.</p>

<!-- more -->


<h2>Apple Stock Question</h2>

<p>I have an array of stock_prices where the keys are the number of minutes into the day (starting with midnight) and the values are the price of Apple stock at that time.  For example, the stock cost $500 at 1am, so stockPricesYesterday[60] = 500.
Write an efficient algorithm for computing the best profit I could have made from 1 purchase and 1 sale of an Apple stock yesterday.</p>

<h2>First Solution</h2>

<p>My first attempt at solving this was the brute force way, which iterates through all of the possible solutions.  While this will give me the answer the issue is that it there are n<sup>2</sup> combinations (where n represents each time and stock price pair, for the day). This result will take O(n<sup>2</sup>) time to get to the solution. Below is an example of my solution.</p>

<p>```ruby Brute Force Apple Stock Solution
  class StockMarket</p>

<pre><code>def apple_stock(stock_prices)
  max_profit = 0

  stock_prices.each_with_index do |buy_price, buy_time|
    stock_prices.each_with_index do |sell_price, sell_time|
      profit = sell_price - buy_price
      if buy_time &lt; sell_time &amp;&amp; profit &gt; max_profit
        max_profit = profit
      end
    end x
  end
  return max_profit

end
</code></pre>

<p>  end
```</p>

<h2>Second Solution &ndash; The Greedy Method</h2>

<p>My next solution was iterating through the stock prices only once to look for the optimal solution.  This is done using the greedy method. A greedy algorithm iterates through the problem space taking the optimal solution &ldquo;so far,&rdquo; until it reaches the end. This method leads to only iterating through the problem n times and gives a solution that is O(n) times fast.</p>

<p>```ruby Greedy Method Apple Stock Solution
class StockMarket
  def apple_stock(stock_prices)</p>

<pre><code>max_profit = 0,
min_price = stock_prices[0]

0.upto(stock_prices.length - 1) do |time|   
  current_price = stock_prices[time]
  min_price = current_price  if current_price &lt; min_price

  current_profit = current_price - min_price
  max_profit = current_profit if current_profit &gt; max_profit[0]
end
max_profit
</code></pre>

<p>  end
end
```</p>

<h2>More About the Greedy Method</h2>

<p>In general, greedy algorithms have five components:</p>

<ol>
<li>A candidate set, from which a solution is created</li>
<li>A selection function, which chooses the best candidate to be added to the solution</li>
<li>A feasibility function, that is used to determine if a candidate can be used to contribute to a solution</li>
<li>An objective function, which assigns a value to a solution, or a partial solution, and</li>
<li>A solution function, which will indicate when we have discovered a complete solution</li>
</ol>


<p>Greedy algorithms help find the optimal solution for some mathematical problems, but not all. This algorithm works best on problems that have two properties:</p>

<h3>Greedy choice property</h3>

<p>We can make whatever choice seems best at the moment and then solve the subproblems that
arise later. The choice made by a greedy algorithm may depend on choices made so far but
not on future choices or all the solutions to the subproblem. It iteratively makes one
greedy choice after another, reducing each given problem into a smaller one. In other words,
a greedy algorithm never reconsiders its choices.</p>

<h3>Optimal substructure</h3>

<p>&ldquo;A problem exhibits optimal substructure if an optimal solution to the problem contains
ptimal solutions to the sub-problems.&rdquo;</p>

<p>Below are a list of more resources to prepare for interviews:</p>

<ul>
<li><a href="http://www.ocf.berkeley.edu/~kelu/interviews/questions.html">http://www.ocf.berkeley.edu/~kelu/interviews/questions.html</a></li>
<li><a href="http://katemats.com/interview-questions/">http://katemats.com/interview-questions/</a></li>
<li><a href="http://meetupresources.herokuapp.com/index.html">http://meetupresources.herokuapp.com/index.html</a></li>
<li><a href="http://codingforinterviews.com/practice">http://codingforinterviews.com/practice</a></li>
<li><a href="https://www.interviewcake.com/">https://www.interviewcake.com/</a></li>
</ul>


<p>Learn more about <a href="https://www.womenwhocode.com/" title="Women Who Code website">Women Who Code</a> and if you are in NYC come checkout a meetup and <a href="http://www.meetup.com/WomenWhoCodeNYC/" title="meetup site">Women Who Code NYC</a>.  The next Algorithm and Interview Prep session is sched</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Industry Trends and Top Companies Using Ruby on Rails]]></title>
    <link href="http://denineguy.github.io/blog/2014/07/17/industry-trends-and-top-companies-using-ruby-on-rails/"/>
    <updated>2014-07-17T01:40:25-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/07/17/industry-trends-and-top-companies-using-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Having spent the last 7 weeks learning Ruby and Ruby on Rails I am slowly beginning to understand its magic and how quickly a web application can be built using Rails.  With this in mind I wanted to better understand why others think this web-application framework is so hot and more importantly I wanted to know what is the growth trend for Ruby on Rails and what companies are using this technology for web applications.  Hey let’s be serious I want to ensure the prospects of finding a job after learning this are feasible.</p>

<!-- more -->


<h2>Why Ruby on Rails is Hot</h2>

<p>Ruby on Rails (RoR) is an open source web application framework written with the Ruby Programming language. It is said that the speed and agility with which applications can be built with Ruby on Rails, results in increased productivity and company growth.  The versatility and speed of Ruby makes it possible to build custom software for app development, allowing businesses have to differentiate themselves, while also creating functional software that makes data collection, visualization and exchange fast and efficient.  Lastly, Ruby on Rails is known to be simpler and cheaper than other traditional web development processes.</p>

<h2>Website Usage and Industry Trends</h2>

<p>All companies ranging from startups to large multinational corporation have begun to realize how fast and effective building web apps with Ruby on Rails is.  As such more companies are using the web frameworking.  According to one estimate there are, over <a href="http://trends.builtwith.com/framework/Ruby-on-Rails" title="Title">600,000</a> websites are running on Ruby on Rails.  Over the past year the number of sites running on Ruby on Rails has increased by approximately 20%.</p>

<h4>Websites Using Rails: Growth Trend</h4>

<p><img src="/images/growth_trend_rails.png" title="Yearly Growth trend for websites using Ruby on Rails" alt="Websites Using Rails: Growth Trend" /></p>

<p>The below image shows the Top Million websites using Ruby on Rails, broken down into segments. (Top 10k sites, Top 100k site and Top Million sites).  There are approximately 230 sites of the top 10k sites that are currently using Ruby on Rails</p>

<h4>Number of Websites Using Ruby on Rails out of Top Million Sites</h4>

<p><img src="/images/number_top_sites_rails.png" title="Growth trend for top websites using Ruby on Rails" alt="Top Websites Using Rails: Growth Trend" /></p>

<p>Ruby on Rails usage spans different industries from business to health with business and shopping being the dominant verticals currently utilizing Ruby on Rails. The chart below shows a visual representation of that.</p>

<h4>Website Verticals</h4>

<p><img src="/images/industry_verticals_rails.png" title="Ruby on Rails Website Verticals" alt="Ruby on Rails Website Verticals" /></p>

<h2>Top Companies</h2>

<p>After discovering that there are a large amount of companies who have adopted Ruby on Rails, I became intrigued and wanted to see what companies were either built with Ruby on Rails and/or are currently using Ruby on Rails.</p>

<ol>
<li><a href="http://www.twitter.com" title="Title">Twitter</a> – Twitter doesn’t use RoR anymore but it was built using Rails. Social Media Site</li>
<li><a href="http://www.shopify.com/" title="Title">Shopify</a> – A platform that let’s you build your own online store</li>
<li><a href="http://www.crunchbase.com/" title="Title">Crunchbase</a> – A free database of technology companies, people, investors that anyone can edit.</li>
<li><a href="http://www.groupon.com/" title="Title">Groupon</a> – A global leader of commerce, offering daily deals</li>
<li><a href="http://www.bloomberg.com/" title="Title">Bloomberg</a> –The global business and financial information and news leader.</li>
<li><a href="https://www.indiegogo.com/" title="Title">Indiegogo</a> – a crowd-funded platform for film, music, technology, charity, gaming etc.</li>
<li><a href="https://www.airbnb.com/" title="Title">Airbnb</a> – is a community marketplace for people to list, discover, and book unique accomodations  around the world.</li>
<li><a href="https://soundcloud.com/" title="Title">Soundcloud</a> &ndash; SoundCloud is an online audio distribution platform based in Berlin, Germany that enables its users to upload, record, promote and share their originally-created sounds.</li>
<li><a href="https://squareup.com/" title="Title">Square</a> – offers and easy way to payment solution, using a white square credit card readers that you can plug into your Android, iPhone or iPad</li>
<li><a href="https://www.heroku.com/" title="Title">Heroku</a>&ndash; a cloud platform as a service supporting several programming languages.</li>
<li><a href="http://www.zendesk.com/" title="Title">Zendesk</a> &ndash; is the leader for integrated on-demand customer support portal solution, based on the latest Web 2.0 technologies and design philosophies</li>
<li><a href="http://www.hulu.com/" title="Title">Hulu</a> – is an online video service that offers a selection of hit shows, clips and movies.</li>
<li><a href="https://github.com/" title="Title">Github</a> &ndash; GitHub is a Git repository web-based hosting service which offers all of the functionality of Git as well as adding many of it&rsquo;s own features.</li>
<li><a href="http://www.slideshare.net/" title="Title">Slideshare</a> &ndash; Offers users the ability to upload and share publicly or privately PowerPoint presentations, Word documents and Adobe PDF Portfolios</li>
<li><a href="https://www.livingsocial.com/" title="Title">Living Social</a> &ndash; features deals on the best things to do in your city, including restaurants, spas, travel, and more, with discounts up to 80% off.</li>
<li><a href="http://www.scribd.com/" title="Title">Scribd</a> &ndash; Unlimited access to 400000+ books with Scribd that can be tead on your iPad, iPhone, Android phone &amp; tablet, or web browser</li>
<li><a href="https://basecamp.com/" title="Title">Basecamp</a> – is a web-based project management tool.</li>
<li><a href="http://www.nytimes.com/" title="Title">New York Times</a></li>
</ol>


<h3>Other Startups who use or have used Ruby on Rails</h3>

<ol>
<li><a href="http://http://www.howaboutwe.com/" title="Title">HowAboutWe</a></li>
<li><a href="http://www.gilt.com/" title="Title">Gilt Groupe</a> &ndash; first version built with RoR</li>
<li><a href="https://www.designerpages.com/" title="Title">Designer Pages</a></li>
<li><a href="https://artsy.net/" title="Title">Art.sy</a></li>
<li><a href="https://www.kickstarter.com/" title="Title">Kickstarter</a></li>
<li><a href="https://www.paperlesspost.com/" title="Title">Paperless Post</a></li>
<li><a href="http://www.bonobos.com/" title="Title">Bonobos</a></li>
<li><a href="https://groupme.com/" title="Title">Group Me</a></li>
<li><a href="http://www.birchbox.com/" title="Title">Birchbox</a></li>
<li><a href="http://www.quirky.com/" title="Title">Quirky</a></li>
</ol>


<p>To learn about more companies using Ruby on Rails visit <a href="http://trends.builtwith.com/framework/Ruby-on-Rails" title="Title">Builtwith</a>.</p>

<p>There are also a number of Ruby on Rails Development companies, such as <a href="http://thoughtbot.com/" title="Title">Thoughtbot</a>. For a list of top Ruby on Rails Development companies click <a href="http://www.thetoptens.com/ruby-rails-development-companies/" title="Title">here</a>.</p>

<h2>Job Trends and Industry Growth</h2>

<p>Based on information from indeed the growth trends for Ruby on Rails developers are very promising. Ruby on Rails developer jobs are promising and the job market will continue to show a high demand for Rails developers.  As more and more companies understand the low-upfront cost and overall cost savings along with ease and speed of development it can be predicted that more and more companies will begin to use Ruby on Rails.</p>

<div style="width:540px">
<a href="http://www.indeed.com/jobtrends?q=Ruby-on-rails" title="Ruby-on-rails Job Trends">
<img width="540" height="300" src="http://www.indeed.com/trendgraph/jobgraph.png?q=Ruby-on-rails" border="0" alt="Ruby-on-rails Job Trends graph">
</a>
<table width="100%" cellpadding="6" cellspacing="0" border="0" style="font-size:80%"><tr>
<td><a href="http://www.indeed.com/jobtrends?q=Ruby-on-rails">Ruby-on-rails Job Trends</a></td>
<td align="right"><a href="http://www.indeed.com/jobs?q=Ruby-on-rails">Ruby-on-rails jobs</a></td>
</tr></table>
</div>




<br>


<br>


<h3>More Resources</h3>

<ul>
<li><a href="http://trends.builtwith.com/framework/Ruby-on-Rails" title="Title">Builtwith</a></li>
<li><a href="http://www.thetoptens.com/ruby-rails-development-companies/" title="Title">Top 10 Ruby on Rails Development Companies</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Password Generating App With Sinatra]]></title>
    <link href="http://denineguy.github.io/blog/2014/07/02/generating-passwords/"/>
    <updated>2014-07-02T00:08:45-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/07/02/generating-passwords</id>
    <content type="html"><![CDATA[<h2>Web Applications with Sinatra</h2>

<p>Over the past week, at The Flatiron School we have been learning about Rack and creating web applications using Sinatra.  Sinatra is a free open source software web application library, that is a domain-specific language written in Ruby, and is dependent on the Rack web service interface.</p>

<!-- more -->


<p>Unlike Ruby on Rails, Sinatra does not follow the typical model-view-controller pattern.  Instead it focuses on quickly creating web applications in Ruby with minimal effort.  After further reading, I discovered that Sinatra is great for creating small apps and is ideal if your controller structure can fit into one or two pages of code. With this in mind, I decided to set it out and try to create my own app.</p>

<h2>My Hatred for Passwords</h2>

<p>I love the internet, always have and always will, but there is one thing in particular that has become increasingly annoying to me and that is the need for passwords on nearly every site.  I mean it has gotten so bad that some companies don’t even let you peruse their site to figure out what they are all about without having to sign in. We know nothing about them but to learn more they have to capture data on us.  I personally think this should be illegal but that is neither here not there.  The reality of the situation is that I can’t keep up with these passwords anymore.  It was so bad at one point that I literally had the same password for every site.  YES I know that is bad, but I just couldn’t think of any better passwords.  I have since started changing them, but am running out of ideas for passwords.  Since it doesn’t seem like the need for passwords on websites are going away anytime soon, I decided to see if I could create a random password generator for myself&hellip;  that is until I figure out a better technology to eliminate the need for passwords altogether.</p>

<p>Please note that my password generator does not produce the most secure passwords at this time.  This is a work in progress and I will continue to develop this app.</p>

<h2>Word-Generator Form</h2>

<p>```html
<form action='/password' method="POST"></p>

<h3>Please enter two words that are at least 5 letters long</h3>


<p>  <p></p>

<pre><code>&lt;label for="first_word"&gt;First Word:&lt;/label&gt;
&lt;input id="first_word" type="text" name="password[first_word]"&gt; &lt;/br&gt; 
&lt;label for="second_word"&gt;Second Word:&lt;/label&gt;
&lt;input id="second_word" type="text" name="password[second_word]"&gt;
</code></pre>

<p>  </p>
  <input type="submit" value="submit"/>
</form>
```</p>

<p>First things I didn’t want an extremly abstract password that I wouldn’t remember.  I thought if I set two words that I could manipulate, maybe I will rememeber them a little better. Above is a form that would take in two words of my choice.</p>

<h2>Class Password</h2>

<p>```ruby
require &lsquo;sinatra&rsquo;
class Password</p>

<p>  attr_accessor :first_word, :second_word, :password_generator</p>

<p>  def initialize</p>

<pre><code>@generator = []
</code></pre>

<p>  end</p>

<p>  def word1</p>

<pre><code>word_split = first_word.split("")
scramble = word_split.permutation(rand(2..4)).to_a[rand(30)]
</code></pre>

<p>  end</p>

<p>  def word2</p>

<pre><code>word_split = second_word.split("")
scramble = word_split.permutation(rand(2..3)).to_a[rand(20)]
</code></pre>

<p>  end</p>

<p>  def password_generator</p>

<pre><code>@generator &lt;&lt; [word1, rand(10), word2, "_", rand(20)].join
@generator[0]
</code></pre>

<p>  end</p>

<p>end
```
I then created a Password Class that takes in two words and permutates them. I randomly select a permutation of 2-4 characters for the first word out of several different permutations, and 1-3 characters for the second word.   I then join the two words with random numbers, and a non-word character, which will ultimately generate my password.</p>

<h2>App.rb &ndash; Routes</h2>

<p>```ruby
module PasswordSinatra
  class App &lt; Sinatra::Base</p>

<pre><code>get '/' do
  erb :index
end

get '/word_generator' do
   erb :word_generator 
end

post '/password' do
  @password = Password.new
  @password.first_word = params[:password][:first_word]
  @password.second_word = params[:password][:second_word]
  @password.password_generator = params[:password][:password_generator]

  erb :password
end

get '/password' do
  erb :word_generator
end
</code></pre>

<p>  end
end
```
This code above shows my routes, the HTTP method (GET or POST) with the corresponding URL destination when a request is made to the server.  The root goes to my index page.  When the link on the index page is clicked it takes the user to a word generator form page, where the user has to enter two words and click submit. This will ultimately end up on the password page which will show them their newly created password. If a user does not like that password they can either refresh page to generate a new password permutation or go back to the word_generator from and submit two new words to create an entirely new password.</p>

<h2>Screenshots of the Password Generator Application</h2>

<h4>Index Page</h4>

<p><img src="/images/index_page.png" title="Password Generator Index Page" alt="index page" /></p>

<h4>Word Generator Form Page</h4>

<p><img src="/images/word_generator.png" title="Word Generator Form Page" alt="word generator form page" /></p>

<h4>Password Page</h4>

<p><img src="/images/password_generator.png" title="Password Generator Page" alt="password generator page" /></p>

<p>Voila and there it is my very own randomly generated password. <em> pp7sar_10 </em></p>

<p>Well this is my app.  I will continue to improve this app and hope to have it deployed shortly.</p>

<h3>References:</h3>

<p>Here is a great blog post to learn when to Rails vs Sinatra: <a href="http://www.sitepoint.com/rails-or-sinatra-the-best-of-both-worlds/" title="Title">Rails or Sinatra: The Best of Both Worlds</a>.</p>
]]></content>
  </entry>
  
</feed>
