<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Greedy | Riding the Rails and Searching for Gems]]></title>
  <link href="http://denineguy.github.io/blog/categories/greedy/atom.xml" rel="self"/>
  <link href="http://denineguy.github.io/"/>
  <updated>2014-09-22T16:00:09-04:00</updated>
  <id>http://denineguy.github.io/</id>
  <author>
    <name><![CDATA[Denine Guy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Greedy Method - Solving the Apple Stock Algorithm]]></title>
    <link href="http://denineguy.github.io/blog/2014/09/11/the-greedy-method-solving-the-apple-stock-algorithm/"/>
    <updated>2014-09-11T17:30:27-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/09/11/the-greedy-method-solving-the-apple-stock-algorithm</id>
    <content type="html"><![CDATA[<p>Last week I had the pleasure of attending a Women Who Code NYC event focusing on Algorithms &amp;Interview Prep. The meetup provided a lot of great resources for interview prep and gave us all a chance to work on our whiteboarding skills. One of the questions we came across was regarding   Apple Stock.</p>

<!-- more -->


<h2>Apple Stock Question</h2>

<p>I have an array of stock_prices where the keys are the number of minutes into the day (starting with midnight) and the values are the price of Apple stock at that time.  For example, the stock cost $500 at 1am, so stockPricesYesterday[60] = 500.
Write an efficient algorithm for computing the best profit I could have made from 1 purchase and 1 sale of an Apple stock yesterday.</p>

<h2>First Solution</h2>

<p>My first attempt at solving this was the brute force way, which iterates through all of the possible solutions.  While this will give me the answer the issue is that it there are n<sup>2</sup> combinations (where n represents each time and stock price pair, for the day). This result will take O(n<sup>2</sup>) time to get to the solution. Below is an example of my solution.</p>

<p>```ruby Brute Force Apple Stock Solution
  class StockMarket</p>

<pre><code>def apple_stock(stock_prices)
  max_profit = 0

  stock_prices.each_with_index do |buy_price, buy_time|
    stock_prices.each_with_index do |sell_price, sell_time|
      profit = sell_price - buy_price
      if buy_time &lt; sell_time &amp;&amp; profit &gt; max_profit
        max_profit = profit
      end
    end x
  end
  return max_profit

end
</code></pre>

<p>  end
```</p>

<h2>Second Solution &ndash; The Greedy Method</h2>

<p>My next solution was iterating through the stock prices only once to look for the optimal solution.  This is done using the greedy method. A greedy algorithm iterates through the problem space taking the optimal solution &ldquo;so far,&rdquo; until it reaches the end. This method leads to only iterating through the problem n times and gives a solution that is O(n) times fast.</p>

<p>```ruby Greedy Method Apple Stock Solution
class StockMarket
  def apple_stock(stock_prices)</p>

<pre><code>max_profit = 0,
min_price = stock_prices[0]

0.upto(stock_prices.length - 1) do |time|   
  current_price = stock_prices[time]
  min_price = current_price  if current_price &lt; min_price

  current_profit = current_price - min_price
  max_profit = current_profit if current_profit &gt; max_profit[0]
end
max_profit
</code></pre>

<p>  end
end
```</p>

<h2>More About the Greedy Method</h2>

<p>In general, greedy algorithms have five components:</p>

<ol>
<li>A candidate set, from which a solution is created</li>
<li>A selection function, which chooses the best candidate to be added to the solution</li>
<li>A feasibility function, that is used to determine if a candidate can be used to contribute to a solution</li>
<li>An objective function, which assigns a value to a solution, or a partial solution, and</li>
<li>A solution function, which will indicate when we have discovered a complete solution</li>
</ol>


<p>Greedy algorithms help find the optimal solution for some mathematical problems, but not all. This algorithm works best on problems that have two properties:</p>

<h3>Greedy choice property</h3>

<p>We can make whatever choice seems best at the moment and then solve the subproblems that
arise later. The choice made by a greedy algorithm may depend on choices made so far but
not on future choices or all the solutions to the subproblem. It iteratively makes one
greedy choice after another, reducing each given problem into a smaller one. In other words,
a greedy algorithm never reconsiders its choices.</p>

<h3>Optimal substructure</h3>

<p>&ldquo;A problem exhibits optimal substructure if an optimal solution to the problem contains
ptimal solutions to the sub-problems.&rdquo;</p>

<p>Below are a list of more resources to prepare for interviews:</p>

<ul>
<li><a href="http://www.ocf.berkeley.edu/~kelu/interviews/questions.html">http://www.ocf.berkeley.edu/~kelu/interviews/questions.html</a></li>
<li><a href="http://katemats.com/interview-questions/">http://katemats.com/interview-questions/</a></li>
<li><a href="http://meetupresources.herokuapp.com/index.html">http://meetupresources.herokuapp.com/index.html</a></li>
<li><a href="http://codingforinterviews.com/practice">http://codingforinterviews.com/practice</a></li>
<li><a href="https://www.interviewcake.com/">https://www.interviewcake.com/</a></li>
</ul>


<p>Learn more about <a href="https://www.womenwhocode.com/" title="Women Who Code website">Women Who Code</a> and if you are in NYC come checkout a meetup and <a href="http://www.meetup.com/WomenWhoCodeNYC/" title="meetup site">Women Who Code NYC</a>.  The next Algorithm and Interview Prep session is sched</p>
]]></content>
  </entry>
  
</feed>
