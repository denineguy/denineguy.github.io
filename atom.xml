<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Riding the Rails and Searching for Gems]]></title>
  <link href="http://denineguy.github.io/atom.xml" rel="self"/>
  <link href="http://denineguy.github.io/"/>
  <updated>2014-10-13T20:37:09-04:00</updated>
  <id>http://denineguy.github.io/</id>
  <author>
    <name><![CDATA[Denine Guy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript: Ajax Basics and JSON]]></title>
    <link href="http://denineguy.github.io/blog/2014/10/13/javascript-ajax-basics-and-json/"/>
    <updated>2014-10-13T10:24:06-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/10/13/javascript-ajax-basics-and-json</id>
    <content type="html"><![CDATA[<p>Ajax is a technique the lets you request data from a web server, update content on a web page without loading a new page and post data to web server without refreshing the page.  The data is often sent in a format called JavaScript Object Notation (or JSON).</p>

<!-- more -->


<h2>What is Ajax</h2>

<p>Have you ever been on a website and begin to type in a word and it autocompletes for you? Have you ever shopped online and added an item to your cart and noticed the cart is updated with out leaving the page?  Maybe you have completed a registration form online and it lets you know whether it was completed successfully without refreshing the page or even checks to see if a username has been taken before submitted the for.  Have you ever used Twitter or Facebook? Do you notice how you are able to post a message or tweet and see other message or tweets without the page refreshing?  All of this happens with the magic of Ajax.</p>

<p>Ajax stands for Asynchronous JavaScript and XML, which has actually been around since 1999 but was referred to back then as XMLHttpRequest Object.  JavaScript is the programming language that makes Ajax happen in that it sends a request, gets a response and updates content asynchronously. The asynchronous processing model means that a user can do other things on the website with the browser is waiting for the data to load on the page, allowing for a better user experience.</p>

<h2>Why use Ajax?</h2>

<p>Typically when a browser comes across a <code>&lt;script&gt;</code> tag, it will stop processing the rest of the page until it has loaded the script.  This is a synchronous processing model.  If a page is loading and has to wait to collect data from the server it also has to not only wait for the script to be loaded and processed but it also has to wait for the server to send the data (the response) that the script is going to display.</p>

<p>With Ajax the browser can request something from the server and while it is waiting a response, the rest of the page can still load allowing the user to still interact with the web page. This is an asynchronous processing model and the beauty of Ajax.  When the response comes back you want to update the page with the new information.  Typically this would be done with refreshing and loading a whole new page.  With Ajax it allows you to just update a specific part of the page with content, by utilizing an event handler and requesting the content from the server with an asynchronous request.  Meanwhile the user can continue to interact with the web page and will thus allow the data to load faster.</p>

<h2>How Ajax Works</h2>

<p>As stated before Ajax is really and XMLHttpRequest Object (XHR).  It is the process of using JavaScript to send a request to the web server, get a response from the server and then update the content on the web page with that response.   A user can continue interacting with the browser until a response is ready to comeback at which point and event is fired and JavaScript calls a function which then updates the content on the page.</p>

<p>You can break the Ajax processing into four parts
1. Create an XMLHttpRequest Object
2. Define a Callback Function
3. Open a Request
4. Send a request</p>

<p>Let look how you handle requests and responses</p>

<figure class='code'><figcaption><span>Request using the XMLHttpRequest</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// code to process results from the server;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;../data/students.json&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s discuss every aspect of this request and the response</p>

<h3>The Request</h3>

<ol>
<li><code>var xhr = new XMLHttpRequest();</code>: creates an instance of the XMLHttpRequest Object using the new keyword and stores that instance in a variable. You can name the variable whatever you like in our case we named it xhr, which is the abbreviation for the XMLHttpRequest.</li>
<li><code>xhr.open('GET', '../data/students.json');</code>: this method prepares the request and it takes two required parameters:

<ol>
<li>The HTTP Method usually a GET or a POST.

<ul>
<li>GET Request &ndash; Used when wanting to receive information from a database or server.</li>
<li>POST Request &ndash; Used when wanting to save information, save from a form, to a database.</li>
</ul>
</li>
<li>The url of the page that will handle the request.</li>
</ol>
</li>
<li><code>xhr.send();</code>: is the method that sends the request to the server.</li>
</ol>


<h3>javascript The Response &ndash; The Callback</h3>

<figure class='code'><figcaption><span>Response using the XMLHttpRequest</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="err">`</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// code to process results from the server;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the callback function and it is the programming you want to run when the server sends back its response.</p>

<ol>
<li><code>xhr.onreadystatechange = function ()</code>: In our example the callback sends back a readystatechange.  When the browser has received and loaded a response from the server the onreadystatechange will fire and trigger a function.</li>
<li><code>if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)</code>:  Once the request/response goes through many changes before it is ready to comeback to the browser.  Once it hits a readyState of <strong>4</strong> the web server has sent back everything it is going to send.  The response also has a statusText, which lets us know if the status came back successfully. We ultimately want a status code of 200-&lsquo;OK&rsquo; before content is loaded on the page, but there are several status that the response can come back as:

<ol>
<li>2xx &ndash; Success, 200 &ndash; OK</li>
<li>3xx &ndash; Redirection</li>
<li>4xx &ndash; Client Error, most common 404 &ndash; File not found</li>
<li>5xx &ndash; Server Error
The Internet Assigned Numbers Authority (IANA) maintains a complete list of <a href="http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml">HTTP Status Codes</a></li>
</ol>
</li>
</ol>


<h2>Data Formats</h2>

<p>The response (callback) to the request can come back in one of three formats HTML, XML or JSON.   The format in which you receive information back is important because you could receive a lot of information back and you want to ensure you have a good data structure in place in order to utilize the data to display on the page
* HTML: Hypertext Markup Language &ndash; The simplest way to get data into a page
* XML: Extensible Markup Language &ndash; which is very similar to HTML but uses its own tags names to describe the data it contains
* JSON: JavaScript Object Notation &ndash; uses syntax like object literal notation to represent data</p>

<p>For the purposes of this blog we are going to focus on JSON, which is more concise than HTML/XML and is commonly used with JavaScript.</p>

<h2>JSON: JavaScript Object Notation</h2>

<p>JSON data looks a lot like object notation, but it isn&rsquo;t an object it is plain text.  The object notation consists of key and values.</p>

<ul>
<li>The object notation is placed in curly brackets <code>{}</code></li>
<li>Keys &ndash; or name is placed in double quotes and is separated by the value with a colon.</li>
<li>Values &ndash; can be any of the following data types: string, number, boolean, array, object</li>
<li>The key/value pairs are separated by commas.</li>
</ul>


<p>This is an example of Object Notation</p>

<figure class='code'><figcaption><span>JSON Object Notation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Amy&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;registered&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;age&quot;</span><span class="o">:</span> <span class="mi">15</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>JSON can also be written in Array Notation in which we can have an array called <strong>students</strong> and we can have say a series of students in object notation.</p>

<ul>
<li>The array uses square bracket notation</li>
<li>The array holds several objects</li>
</ul>


<p>This is an example of Array Notation</p>

<figure class='code'><figcaption><span>JSON Array Notation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="s2">&quot;students&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Amy&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;registered&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;age&quot;</span><span class="o">:</span> <span class="mi">15</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Amber&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;registered&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;age&quot;</span><span class="o">:</span> <span class="mi">12</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Bojana&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;registered&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;age&quot;</span><span class="o">:</span> <span class="mi">13</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p> As stated earlier JSON is really just string of plain text.  In order for JavaScript to use the data we need to format it into an object. <code>JSON.parse()</code> will convert a string of JSON data into a JavaScript objects ready for the browser to use and then we store it into a variable <code>var students</code>.  The HTML added using the innerHTML property. We will first create a variable <code>var statusHTML</code> which will store the HTML data. Because we are bringing back an array of objects we will need to loop through the object to access the data using dot notation. The contents of the object are added to <strong>statusHTML</strong> variable. When the loop has finished the stuents objects, the new HTML is added to the page using the inner HTML property.</p>

<p>This is a full example of Loading JSON with Ajax. In this example we are taking an array of students and determining if they have registered for a class. If they have registered it will be false if they have not registered it will be true.  We will show a yes button if registered and a no button if not registered.</p>

<figure class='code'><figcaption><span>Loading JSON with Ajax-Student Registration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>                   <span class="c1">//Create XMLHttpRequest object</span>
</span><span class='line'>
</span><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>            <span class="c1">//When readystate changes </span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//If readyState is 4 and status ok</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">students</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Build up the string with statusHTML</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">statusHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;ul class=&quot;bulleted&quot;&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">students</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">//Loop through the Object</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">students</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">registered</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">statusHTML</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li class=&quot;yes&quot;&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">statusHTML</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li class=&quot;no&quot;&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">statusHTML</span> <span class="o">+=</span> <span class="nx">students</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">statusHTML</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">statusHTML</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/ul&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Update the page with new contenct</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;studentList&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">statusHTML</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;../data/students.json&#39;</span><span class="p">);</span>        <span class="c1">//Prepare the request</span>
</span><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>                                      <span class="c1">//Send the request</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to see the full code for this please visit my Git Repository <a href="https://github.com/denineguy/ajax_basics">Ajax Basics</a>. Remember you will need this on a server in order like localhost:3000 in order for this to work.</p>

<h2>jQuery and Ajax</h2>

<h3>jQuery and Ajax Requests</h3>

<p>jQuery provides several methods to handle Ajax requests.  Below are 6 methods</p>

<ul>
<li>.load()       Loads HTML fragments into an element and is the simplest method for retrieving data.</li>
<li>$.get()       Loads data using the HTTP GET method and is used to request data from a server or get retrieve data from a database</li>
<li>$.post()      Loads data using the HTTP POST method and is used to send data to a server and exampler would be storing data from a submitted form to a database.</li>
<li>$.getJSON()   Loads JSON data using a GET request Used for JSON data.</li>
<li>$.getScript() Loads and executes JavaScript data using GET.</li>
<li><p>$.ajax()      This method is used to perform all requests.
There are a few reasons you would use $.ajax() method over the $.get() or $.post()methods</p></li>
<li><p>The $.ajax() method has more options and provides greater control over Ajax requests</p></li>
<li>The method lets you set a timeout to control how long you are willing to wait for a response from the server</li>
<li>The method lets you send a username + password to resources that require user authentication.</li>
</ul>


<p>You can see a list of the requests on the <a href="http://api.jquery.com/category/ajax/shorthand-methods/">jQuery API Documentation</a>
and a comparison of the different request at this <a href="https://spreadsheets.google.com/pub?key=t9C9vnWDA-4oD1tWPChDmCQ&amp;output=html">Comparison Table</a></p>

<h3>jQuery and Ajax Responses</h3>

<p>With The .load() method, the HTML returned from the server is directly inserted into the jQuery selection.  Below is an example of this</p>

<figure class='code'><figcaption><span>Ajax $.load() Method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">sendAjax</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#ajax&#39;</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="s1">&#39;sidebar.html&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the shorthand notation that loads the contents from sidebar.html into an HTML element with and ID of ajax. For other methods aside from the .load() method, utilize the jqXHR object to specify what should be done when the data is returned. Below are JQXHR Properties</p>

<ul>
<li>responseText &ndash;          Text-based data returned</li>
<li>responseXML &ndash;           XML data returned</li>
<li>status &ndash;                Status code</li>
<li>statusText &ndash;            Status description (typically used to display information about an error if one occurs)</li>
</ul>


<h2>The jQuery Ajax Shorthand methods</h2>

<h3>GET Method Request</h3>

<p>The structure of the GET method is as follows <code>$.get(url, data, callback)</code></p>

<ul>
<li><em>url</em> &ndash; specifies where the data is coming from</li>
<li><em>data</em> &ndash; provides any extra information to send to the server.</li>
<li><em>callback</em> &ndash; indicated that the function should be called when data is returned.</li>
</ul>


<p>The get method could be used instead of the .load() method used above</p>

<figure class='code'><figcaption><span>Ajax $.GET() Method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sidebar.html&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>   <span class="c1">//in this case there is no data </span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#ajax&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>POST Method request</h3>

<p>Like the GET method the structure of the POST method is the same <code>$.post(url, data, callback)</code>
In the below we are going to look at submitting a form to a data base</p>

<figure class='code'><figcaption><span>POST Method: Submitting a Form</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>                  <span class="c1">//JavaScript doesn&#39;t until page loaded</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>                  <span class="c1">//Submits the Form</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>                           <span class="c1">//Prevents new page load when form submitted </span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;action&quot;</span><span class="p">);</span>             <span class="c1">//post action by clicking the submit button</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">serialize</span><span class="p">();</span>               <span class="c1">//captures the data entered in form fields</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span><span class="nx">data</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>          <span class="c1">// Post Method and callback function</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#signup&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;&lt;p&gt;Thanks for signing up!&lt;/p&gt;&quot;</span><span class="p">)</span>   <span class="c1">//Replaces the html</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span> <span class="c1">// end ready</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s dissect this code.</p>

<ol>
<li><code>$(document).ready(function()</code> is needed when you put the script tags at the top of your index.html file.  It prevents the javaScript from running until the page is load.</li>
<li><code>e.preventDefault();</code> is a method used to stop the form from submitting and going to another page.</li>
<li><code>.serialize()</code> is a method used to capture the name and attributes of the form. The puts information in a nice format in order to send the data to the server and store  it in the database.</li>
<li><code>$.post(url,data,function(response)</code> This is the POST method Ajax request that request information from the server and once complete brings back a response to be loaded to the page</li>
<li><code>$('#signup').html("&lt;p&gt;Thanks for signing up!&lt;/p&gt;"</code> This is the HTML that will be loaded on the page.</li>
</ol>


<p>To understand this more or to see more of this code you can visit my GITHUB Repo <a href="https://github.com/denineguy/ajax_jquery/tree/master">jQuery Ajax</a>, but I highly recommend going through the Ajax tutorial on <a href="http://teamtreehouse.com/library/ajax-basics">TeamTreehouse</a>.  This specific example and several other demonstrated in this blog are on that tutorial and really helped me learn the material.  Go through it in detail and it will discuss more about the jQuery Ajax methods and error handling. For a full list of the jQuery Ajax Shorthand methods visit the <a href="http://api.jquery.com/category/ajax/">jQuery API Documentation</a></p>

<h2>Ajax Limitations</h2>

<p>One big limitation of Ajax is that works great with data from your own server but for security reasons &ndash; browsers don&rsquo;t load Ajax responses from other domains.  You will have trouble doing the following</p>

<ul>
<li>Requesting data from another site</li>
<li>Switching ports &ndash; You can&rsquo;t switch from port 80 to port 8888</li>
<li>Switching host &ndash; You can&rsquo;t go from www.myblog.com to db.myblog.com</li>
</ul>


<p>There are 3 workarounds however that will allow you to receive Ajax responses from other domains.</p>

<ol>
<li>Web Proxy – in which you create a file on your server that collect data from the remote server using a server side language like (Ruby, PHP, Node.js etc.).  The other pages on your site then request the data from the file on your site.  This is called a proxy.</li>
<li>JSONP &ndash; This is JSON with padding which involves adding <code>&lt;script&gt;&lt;/script&gt;</code> into the page which will load the JSON data from another server.</li>
<li>CORS &ndash; CORS is Cross Origin Resource Sharing, which involves adding extra information to the HTTP headers to let the browser and server know that they should be communicating with each other.  CORS is a W3C specification but is only supported by the most recent browsers.</li>
</ol>


<p>I hope this has been helpful for you.  In my next blog post on Ajax, I will discuss how you can use APIs using Ajax.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Rails]]></title>
    <link href="http://denineguy.github.io/blog/2014/09/22/getting-started-with-rails/"/>
    <updated>2014-09-22T10:19:58-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/09/22/getting-started-with-rails</id>
    <content type="html"><![CDATA[<p><a href="http://guides.rubyonrails.org/">Rails</a> has rapidly become one of the most powerful frameworks for building dynamic web applications and it is written in the Ruby language. Today there are several startups that use Rails including GitHub, Shopify, Hulu,Quirky, Airbnb. There are also several web development companies that focus on Rails development, among those are Pivotal Labs and Thoughbot. One of the great things about Rails is that it is 100% open-source and as a result cost nothing to download.  The framework is designed to make building web applications easier by making assumptions about what every developer needs to get started and it allows you to write less code while accomplishing more than other languages and frameworks.</p>

<!-- more -->


<p>Rails follows two major guiding principles:</p>

<ol>
<li>DRY(Don&rsquo;t Repeat Yourself) &ndash; By not repeating the same code over and over again the code is more maintainable, extensibility and minimizes bugs</li>
<li>Convention over Configuration &ndash; Rails believe it has created the best ways to do many things in a web application and this it follow many conventions rather than having the developer set up many configuration files.</li>
</ol>


<h2>Let&rsquo;s get Started</h2>

<p>We are going to create a simple Blog Post. The first thing you need to do is set up your Rails environment.  You should have the following installed:</p>

<ol>
<li><a href="http://www.ocf.berkeley.edu/~kelu/interviews/questions.html">Ruby language</a></li>
<li><a href="http://rubygems.org/">Ruby Gem&rsquo;s packaging system</a></li>
<li><a href="http://www.sqlite.org/">SQLite3 Database</a></li>
</ol>


<p>Assuming that all of those have been downloaded successfully, you now need to install Rails. To install Rails you just type the following in your command line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ gem install rails</span></code></pre></td></tr></table></div></figure>


<p>To ensure it is installed correctly run the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ bin/rails --version</span></code></pre></td></tr></table></div></figure>


<p>The version should be 4.1.2 or greater</p>

<p>Once your environment is completely setup it is easy to set up a new Rails app. You would enter rails new and the name of the application in the command line.  Enter the following in your command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rails new blog</span></code></pre></td></tr></table></div></figure>


<p>Rails will automatically run bundler for you, but go to your Gemfile and add any other Gems you wish to use.  After you have added them to your file run <code>bundle install</code> in the command line. Now cd into your new application and open it in your text editor.  You will see that Rails has auto-generated a number of files and folders for you. To get a full explanation and purpose for each file and folder checkout the <a href="http://guides.rubyonrails.org/getting_started.html">Rails Guides</a> for full documentation on it.</p>

<h2>Model-View-Controller</h2>

<p>Rails follows the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">model-view-controller(MVC)</a> pattern, which separates the applicaton behavior(business logic) from the input and the user interface. In our case business logic is the model for posts and comments while the user interface is the web page in the browser.</p>

<p>In essence for Rails applications when a browser sends a request it is received by the web server and then passed to the Rails controller, which determines what to do next.  In some cases the controller will render a view, an HTML template that gets sent back to the server.  In most cases, however, the controller will interact with the model, a Ruby object which is a component of the site(such as a post) and it will communicate with the database. After communicating with the database the controller will step in and render a view, the web page in HTML format.</p>

<p><img src="http://denineguy.github.io/images/mvc_image.png" title="A detailed diagram of MVC in Rails" alt="Rails MVC Diagram" /></p>

<h2>Models</h2>

<p>To get started we need to think about what we need for our application.  In our case we are creating a very simple blog and at a minimum we need to think about the posts for the blog and the comments. The posts should have a title and content.  The comment should have a commenter and content and post_id which is a foreign key to posts and this bascially states that the comment <code>belongs_to</code> a post.  In order to create your model you will write the following in your command line.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  rails generate model Post title:string content:text
</span><span class='line'>  rails generate model Comment content:text post_id:integer</span></code></pre></td></tr></table></div></figure>


<p>Somethings to note is that model is typically singular. After you write the name of the model(your object) you define the attributes of the object by writing it in the format attribute:type, where attribute is the title and type would be string, text, integer, boolean, date. The difference between string and text is that a string is for short text input usually 255 characters or less and text is user for more input like content which could potentially be more than 255 characters. After generating the models the following should be populated.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♥ rails generate model Post title:string content:text
</span><span class='line'>    invoke  active_record
</span><span class='line'>    create    db/migrate/20140920155246_create_posts.rb
</span><span class='line'>    create    app/models/post.rb
</span><span class='line'>    invoke    test_unit
</span><span class='line'>    create      test/models/post_test.rb
</span><span class='line'>    create      test/fixtures/posts.yml
</span><span class='line'>[11:52:47] blog
</span><span class='line'>♥ rails generate model Comment content:text post_id:integer
</span><span class='line'>    invoke  active_record
</span><span class='line'>    create    db/migrate/20140920155332_create_comments.rb
</span><span class='line'>    create    app/models/comment.rb
</span><span class='line'>    invoke    test_unit
</span><span class='line'>    create      test/models/comment_test.rb
</span><span class='line'>    create      test/fixtures/comments.yml</span></code></pre></td></tr></table></div></figure>


<p>The model is responsible for creating your post and comment models as well as your migration files for both models. Let&rsquo;s look at the migrations.  Go to the <code>db/migrate</code> folder and you will see migration files for both <code>create_post.rb</code> and <code>create_comments.rb</code> with a timestamp in front of the name of the file. These files create your Active Record migration and basically setup the structure for the database table which are essentially the attributes for each model. You will see that Rails automatically adds a timestamp which will generate the created_at and updated_at fields in your database and tell you when a record has been added or updated to the database.</p>

<figure class='code'><figcaption><span>Post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreatePosts</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:posts</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:title</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:content</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Comment.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateComments</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:comments</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:commenter</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:content</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:post_id</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>rails generate model, also creates your model files. If you go to your text editor in <code>app/models</code> you should now see a <code>post.rb</code> and <code>comment.rb</code> file. Both should look you have a class for the specific modes which inherits from ActiveRecord::Base.  In our models we need to tell Active Record how the models are associated with each other. To learn more about associations visit <a href="http://guides.rubyonrails.org/association_basics.html">Rails Active Record Association</a>.  This is how our foreign key will essentially work.  So let&rsquo;s think about this.  For any one post it is possible to have a lot of comments and a comment belongs to only one post.  We also want to make sure that a post has at least a title in order for it to be saved and a comment needs to have some content. We can do that by validating the presence of those attributes. Validations are covered in detail in <a href="http://guides.rubyonrails.org/active_record_validations.html">Rails Active Record Validations</a>.  So let&rsquo;s write the following associations in our model.</p>

<figure class='code'><figcaption><span>Post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:title</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Comment.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:content</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have our models and table configuration set up we now need to migrate the table to actually generate the database table.  In you command line run <code>rake db:migrate</code>
You should see that a create_table post and create_table comment were both generated. Visit <a href="http://guides.rubyonrails.org/migrations.html">Rails Database Migrations</a> for more information on Migrations</p>

<figure class='code'><figcaption><span>Rake db:migrate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♥</span> <span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span><span class='line'><span class="o">==</span> <span class="mi">20140920155246</span> <span class="ss">CreatePosts</span><span class="p">:</span> <span class="n">migrating</span> <span class="o">======================================</span>
</span><span class='line'><span class="o">--</span> <span class="n">create_table</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">0023</span><span class="n">s</span>
</span><span class='line'><span class="o">==</span> <span class="mi">20140920155246</span> <span class="ss">CreatePosts</span><span class="p">:</span> <span class="n">migrated</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mo">0024</span><span class="n">s</span><span class="p">)</span> <span class="o">=============================</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span> <span class="mi">20140920155332</span> <span class="ss">CreateComments</span><span class="p">:</span> <span class="n">migrating</span> <span class="o">===================================</span>
</span><span class='line'><span class="o">--</span> <span class="n">create_table</span><span class="p">(</span><span class="ss">:comments</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">0012</span><span class="n">s</span>
</span><span class='line'><span class="o">==</span> <span class="mi">20140920155332</span> <span class="ss">CreateComments</span><span class="p">:</span> <span class="n">migrated</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mo">0013</span><span class="n">s</span><span class="p">)</span> <span class="o">==========================</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once your migration finishes a <code>schema.rb</code> will be generated. Go to you text editor and go to the folder <code>db\schema.rb</code>This will show the layout of your tables, which should look like the following.</p>

<figure class='code'><figcaption><span>Schema.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">version</span><span class="p">:</span> <span class="mi">20140920155332</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">create_table</span> <span class="s2">&quot;comments&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;commenter&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">text</span>     <span class="s2">&quot;content&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;post_id&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;created_at&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;updated_at&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">create_table</span> <span class="s2">&quot;posts&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;title&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">text</span>     <span class="s2">&quot;content&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;created_at&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;updated_at&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s see what our website looks like so far.  In the command line start your rails server by entering <code>rails s</code>. Once that runs enter <code>http://localhost:3000</code> in your browser and you should see the following.</p>

<p><img src="http://denineguy.github.io/images/welcome_aboard_rails.png" title="Rails Default Information Page Welcome Aboard." alt="Rails Default Information Page" /></p>

<p>In the next section we will begin to render our application in the browser</p>

<h2>Controllers</h2>

<p>In order to begin to render the application on the page you need at least a controller and a view. For our application we will need to create a Post Controller and a Comments Controller.
As we discussed previously the controllers purpose is to recieve specific request from the application.  The routers purpose is to decide which controller recieves which request.  Each action&rsquo;s purpose is to collect  information to provide it to a view. A view&rsquo;s purpose is to display this information in a human readable format. View templates are written in a language called eRuby (Embedded Ruby).</p>

<p>To create your controllers you need to enter <code>rails g controller Posts</code> and <code>rails g controller Comments</code>.  Notice that unlike your models which are singular your controllers are plural.</p>

<figure class='code'><figcaption><span>PostsController and CommentsController</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♥</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="no">Posts</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">app</span><span class="o">/</span><span class="n">controllers</span><span class="o">/</span><span class="n">posts_controller</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">erb</span>
</span><span class='line'>      <span class="n">create</span>    <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">posts</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">test_unit</span>
</span><span class='line'>      <span class="n">create</span>    <span class="nb">test</span><span class="o">/</span><span class="n">controllers</span><span class="o">/</span><span class="n">posts_controller_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">helper</span>
</span><span class='line'>      <span class="n">create</span>    <span class="n">app</span><span class="o">/</span><span class="n">helpers</span><span class="o">/</span><span class="n">posts_helper</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">test_unit</span>
</span><span class='line'>      <span class="n">create</span>      <span class="nb">test</span><span class="o">/</span><span class="n">helpers</span><span class="o">/</span><span class="n">posts_helper_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">assets</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">coffee</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">javascripts</span><span class="o">/</span><span class="n">posts</span><span class="o">.</span><span class="n">js</span><span class="o">.</span><span class="n">coffee</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">scss</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">stylesheets</span><span class="o">/</span><span class="n">posts</span><span class="o">.</span><span class="n">css</span><span class="o">.</span><span class="n">scss</span>
</span><span class='line'><span class="o">[</span><span class="mi">11</span><span class="p">:</span><span class="mi">25</span><span class="p">:</span><span class="mi">23</span><span class="o">]</span> <span class="p">(</span><span class="n">master</span><span class="p">)</span> <span class="n">blog</span>
</span><span class='line'><span class="err">♥</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="no">Comments</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">app</span><span class="o">/</span><span class="n">controllers</span><span class="o">/</span><span class="n">comments_controller</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">erb</span>
</span><span class='line'>      <span class="n">create</span>    <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">comments</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">test_unit</span>
</span><span class='line'>      <span class="n">create</span>    <span class="nb">test</span><span class="o">/</span><span class="n">controllers</span><span class="o">/</span><span class="n">comments_controller_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">helper</span>
</span><span class='line'>      <span class="n">create</span>    <span class="n">app</span><span class="o">/</span><span class="n">helpers</span><span class="o">/</span><span class="n">comments_helper</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">test_unit</span>
</span><span class='line'>      <span class="n">create</span>      <span class="nb">test</span><span class="o">/</span><span class="n">helpers</span><span class="o">/</span><span class="n">comments_helper_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">assets</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">coffee</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">javascripts</span><span class="o">/</span><span class="n">comments</span><span class="o">.</span><span class="n">js</span><span class="o">.</span><span class="n">coffee</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">scss</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">stylesheets</span><span class="o">/</span><span class="n">comments</span><span class="o">.</span><span class="n">css</span><span class="o">.</span><span class="n">scss</span>
</span></code></pre></td></tr></table></div></figure>


<p>    <br/>
Generating controllers will create both your controller files and your view files.  If you go to your text editor and go to app/controllers you should now see a <code>comments_controller.rb</code> and <code>posts_controller.rb</code> file, which both inherit from the Application Controller. If you go to app\views you will now see folders for comments and posts.</p>

<figure class='code'><figcaption><span>posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>comments_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CommentsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Routes</h2>

<p>We will now add routes to our application.  Please enter the following in your <code>routes.rb</code> file.</p>

<figure class='code'><figcaption><span>Routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:posts</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates comments as a nested resource within posts. This is another part of capturing the hierarchical relationship that exists between posts and comments. This basically states that comments will only be viewed through routes generated for posts.</p>

<p>Now you can enter <code>rake routes</code> and you should see the following.</p>

<figure class='code'><figcaption><span>Rake Routes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♥</span> <span class="n">rake</span> <span class="n">routes</span>
</span><span class='line'>           <span class="no">Prefix</span> <span class="no">Verb</span>   <span class="no">URI</span> <span class="no">Pattern</span>                                 <span class="no">Controller</span><span class="c1">#Action</span>
</span><span class='line'>    <span class="n">post_comments</span> <span class="no">GET</span>    <span class="sr">/posts/</span><span class="ss">:post_id</span><span class="o">/</span><span class="n">comments</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>          <span class="n">comments</span><span class="c1">#index</span>
</span><span class='line'>                  <span class="no">POST</span>   <span class="sr">/posts/</span><span class="ss">:post_id</span><span class="o">/</span><span class="n">comments</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>          <span class="n">comments</span><span class="c1">#create</span>
</span><span class='line'> <span class="n">new_post_comment</span> <span class="no">GET</span>    <span class="sr">/posts/</span><span class="ss">:post_id</span><span class="o">/</span><span class="n">comments</span><span class="o">/</span><span class="kp">new</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">comments</span><span class="c1">#new</span>
</span><span class='line'><span class="n">edit_post_comment</span> <span class="no">GET</span>    <span class="sr">/posts/</span><span class="ss">:post_id</span><span class="o">/</span><span class="n">comments</span><span class="o">/</span><span class="ss">:id</span><span class="o">/</span><span class="n">edit</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span> <span class="n">comments</span><span class="c1">#edit</span>
</span><span class='line'>     <span class="n">post_comment</span> <span class="no">GET</span>    <span class="sr">/posts/</span><span class="ss">:post_id</span><span class="o">/</span><span class="n">comments</span><span class="o">/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">comments</span><span class="c1">#show</span>
</span><span class='line'>                  <span class="no">PATCH</span>  <span class="sr">/posts/</span><span class="ss">:post_id</span><span class="o">/</span><span class="n">comments</span><span class="o">/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">comments</span><span class="c1">#update</span>
</span><span class='line'>                  <span class="no">PUT</span>    <span class="sr">/posts/</span><span class="ss">:post_id</span><span class="o">/</span><span class="n">comments</span><span class="o">/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">comments</span><span class="c1">#update</span>
</span><span class='line'>                  <span class="no">DELETE</span> <span class="sr">/posts/</span><span class="ss">:post_id</span><span class="o">/</span><span class="n">comments</span><span class="o">/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">comments</span><span class="c1">#destroy</span>
</span><span class='line'>            <span class="n">posts</span> <span class="no">GET</span>    <span class="sr">/posts(.:format)                            posts#index</span>
</span><span class='line'><span class="sr">                  POST   /</span><span class="n">posts</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>                            <span class="n">posts</span><span class="c1">#create</span>
</span><span class='line'>         <span class="n">new_post</span> <span class="no">GET</span>    <span class="sr">/posts/ne</span><span class="n">w</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>                        <span class="n">posts</span><span class="c1">#new</span>
</span><span class='line'>        <span class="n">edit_post</span> <span class="no">GET</span>    <span class="sr">/posts/</span><span class="ss">:id</span><span class="o">/</span><span class="n">edit</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>                   <span class="n">posts</span><span class="c1">#edit</span>
</span><span class='line'>             <span class="n">post</span> <span class="no">GET</span>    <span class="sr">/posts/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>                        <span class="n">posts</span><span class="c1">#show</span>
</span><span class='line'>                  <span class="no">PATCH</span>  <span class="sr">/posts/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>                        <span class="n">posts</span><span class="c1">#update</span>
</span><span class='line'>                  <span class="no">PUT</span>    <span class="sr">/posts/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>                        <span class="n">posts</span><span class="c1">#update</span>
</span><span class='line'>                  <span class="no">DELETE</span> <span class="sr">/posts/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>                        <span class="n">posts</span><span class="c1">#destroy</span>
</span></code></pre></td></tr></table></div></figure>


<p>The below graphic represents the implementation of the REST architecture in Rails and explains the URL, the controller action and purpose of each RESTful route.</p>

<p><img src="http://denineguy.github.io/images/routes_rest.png" title="Rails RESTful Routes Table." alt="Rails RESTful Routes Table" /></p>

<p>The root directory or home page will appear on localhost:3000.  To set the root directory to a view other than the default root directory, use  root :to => &lsquo;Controller#action&rsquo;.  You can set the root directory as a separtate landing page but for our application we will set the posts index page as the root directory by entering root :to => &ldquo;posts#index&rdquo; in  routes.rb.</p>

<figure class='code'><figcaption><span>Routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;posts#index&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:posts</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to see anything on localhost:3000 we will now need to create our post#index view.  We do this by creating and <code>index.html.erb</code> file in the app/views/posts folder. In this view we will render all of our posts. We will use embedded ruby.  For now lets just write the following in the <code>index.html.erb</code> file</p>

<figure class='code'><figcaption><span>Routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">All</span> <span class="no">Blog</span> <span class="no">Posts</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>if you go to localhost:3000 you should now see All Blog Posts displayed on your root page.</p>

<h2>CRUD Post and Comment Controllers</h2>

<p>We now need to completely set up our controllers so that we can add, edit, show and delete post and be able to create a comment. We will take care of these actions in our controller which will allow us to collect information and display the information in the view.  I will show what should go into each section and explain what it does and what view it will render.</p>

<p>Your Posts Controller should look like the following</p>

<figure class='code'><figcaption><span>posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:set_post</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET/posts</span>
</span><span class='line'>  <span class="c1"># posts/index.html.erb which displays all posts</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /posts/new</span>
</span><span class='line'>  <span class="c1"># posts/new.html.erb which shows and HTML form to create a new post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># POST /posts</span>
</span><span class='line'>  <span class="c1"># posts/index.html.erb  </span>
</span><span class='line'>  <span class="c1"># This saves information to the database after after new post is created from new.html.erb</span>
</span><span class='line'>  <span class="c1"># redirects to index page where new post will appear</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Post was successfully created.&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /posts/1   </span>
</span><span class='line'>  <span class="c1">#posts/show.html.erb</span>
</span><span class='line'>  <span class="c1"># this will show an individual post for an newly created or updated post</span>
</span><span class='line'>  <span class="c1"># will also contain the comment form to create a new comment and show comments</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@comment</span> <span class="o">=</span> <span class="no">Comment</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /posts/1/edit   </span>
</span><span class='line'>  <span class="c1"># edit.html.erb</span>
</span><span class='line'>  <span class="c1"># This is an HTML form for editing a post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># PATCH/PUT /posts/1</span>
</span><span class='line'>  <span class="c1"># posts/show.html.erb</span>
</span><span class='line'>  <span class="c1"># save the information from edit.html.erb to the database and updates a specific post</span>
</span><span class='line'>  <span class="c1"># it will then render the show.html.erb page</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Post was successfully updated.&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:ok</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="vi">@post</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:edit</span> <span class="p">}</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@post</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># DELETE /posts/1</span>
</span><span class='line'>  <span class="c1"># posts/show.html.erb</span>
</span><span class='line'>  <span class="c1"># The deletes a specific post and removes it from the database</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="vi">@post</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">posts_url</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Post was successfully destroyed.&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">head</span> <span class="ss">:no_content</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="c1"># Use callbacks to share common setup or constraints between actions.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_post</span>
</span><span class='line'>      <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Strong parameters, to only allow specific attributes to be updated and saved to database.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">post_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your Comments Controllers you should look like the following.  This will allow you to create a new comment and save it to the database and redirect you the comment for that post.</p>

<figure class='code'><figcaption><span>comments_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@comment</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">comment_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@comment</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="vi">@comment</span><span class="o">.</span><span class="n">post</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="ss">:back</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">comment_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:comment</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:commenter</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Views</h2>

<p>Now that the controllers and routes have been set up for the Posts and Comments the only thing
left to do now is to set up the view.  As stated before we will use the embedded ruby to create
the templates for all of the views that correspond to the controller actions.  You can see all of the views in the <a href="https://github.com/denineguy/blog">GitHub Repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Does the Internet Work]]></title>
    <link href="http://denineguy.github.io/blog/2014/09/19/how-does-the-internet-work/"/>
    <updated>2014-09-19T15:42:12-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/09/19/how-does-the-internet-work</id>
    <content type="html"><![CDATA[<p>This week I was asked a question that kind of stumped me.  How does the Internet work?  I had an idea of how it works, but I didn&rsquo;t know the correct terminology to correctly articulate.  It got me thinking, how does the Internet actually work? In this post I attempt to explain how it works at it&rsquo;s most basic level</p>

<!-- more -->


<h2>What is the Internet</h2>

<p>The Internet is essentially a wire that is actually buried underground.  It may be fiber optic wire cables or sometimes beamed to satellites or cell phone networks but it is essentially a wire. The Internet, as I am sure you all know, is useful because two computers connected to this wire can communicate with each other.  A server is a computer connected directly to the Internet and a web page is essentially a file that is stored on that server’s hard drive.</p>

<h2>How to render a Webpage</h2>

<p>So say you are on your computer and you want to go to the google.com webpage.  You would type in www.google.com and voila a webpage would render&hellip;but how does that happen? Well your computer is a client because it does not directly connect to the Internet.  It connects to the Internet through and Internet Service Provider, using DSL. To get to google.com webpage, which is and ISP and a server, a lot happens on the backend. Let&rsquo;s first take a look at protocols</p>

<h2>Protocols</h2>

<p>Protocols are sets of rules that machines follow to complete tasks. Two of the most important protocols for the web are TCP/IP, which defines how electronic devices (like computers) should be connected over the Internet, and how data should be transmitted between them.</p>

<ol>
<li>TCP &ndash; transmission control protocol

<ul>
<li>TCP breaks down every piece of data into packets, because a webpage is too large to transfer over the Internet all at once.</li>
</ul>
</li>
<li>IP is Internet protocol

<ul>
<li>IP address is specific to each device that is connected to the Internet and it is how one machine can find another machine through the network</li>
</ul>
</li>
</ol>


<p>The TCP/IP protocols are usually used together and they are basically the rules for how information is passed through the Internet. When you want to send a message or retrieve information from another computer TCP/IP is what makes this possible. One of the most common types protocols for the web is Hypertext Transfer Protocol (HTTP), which takes care of the communication between the web server and the web browser.  It is used for sending information from the client (browser) to the web server and then returning the web content back from the web server to the client.</p>

<h2>Sending and Retrieving Information</h2>

<p>As stated previously, when I type in google.com a request is sent to the Internet Service Provider, which routes the request to the server. It first hits the domain name server (DNS), which looks at the domain name typed in (such as www.google.com) and then searches for the correct IP address associated with that Domain Name.  The DNS will then point that request in the correct direction.   Once it hits the target server, in our case it would be the server for Google, the server will respond by sending the files back to your computer in a series of packets.  The packets are about 1000 – 1500 bytes and have header and footer telling what information is in the packet and how it fits in with the entire file, along with the IP address.  Note that the packets don&rsquo;t all follow the same path back because they are looking for the quickest route back to the client.  Routers direct the packets around the Internet helping them reach your computer.   Each router examines the destination addresses and contents of the packets it receives and then passes the packets on to another router as they make their way to their final destination (your computer). Once they get to the client TCP comes into play again and puts the packets back together based on the information stored in that packet, whether that be an image, an email message or even a tweet. HTTP helps to return the web content to the browser.  The Hypertext Markup Language (HTML), in the files, tells the Web browser how to display the page and its element and thus google.com webpage is rendered.</p>

<p>So this is very basic, but it is in essence how the Internet works.  Learning this was very helpful to me and I hope that is will be of use to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Greedy Method - Solving the Apple Stock Algorithm]]></title>
    <link href="http://denineguy.github.io/blog/2014/09/11/the-greedy-method-solving-the-apple-stock-algorithm/"/>
    <updated>2014-09-11T17:30:27-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/09/11/the-greedy-method-solving-the-apple-stock-algorithm</id>
    <content type="html"><![CDATA[<p>Last week I had the pleasure of attending a Women Who Code NYC event focusing on Algorithms &amp;Interview Prep. The meetup provided a lot of great resources for interview prep and gave us all a chance to work on our whiteboarding skills. One of the questions we came across was regarding   Apple Stock.</p>

<!-- more -->


<h2>Apple Stock Question</h2>

<p>I have an array of stock_prices where the keys are the number of minutes into the day (starting with midnight) and the values are the price of Apple stock at that time.  For example, the stock cost $500 at 1am, so stockPricesYesterday[60] = 500.
Write an efficient algorithm for computing the best profit I could have made from 1 purchase and 1 sale of an Apple stock yesterday.</p>

<h2>First Solution</h2>

<p>My first attempt at solving this was the brute force way, which iterates through all of the possible solutions.  While this will give me the answer the issue is that it there are n<sup>2</sup> combinations (where n represents each time and stock price pair, for the day). This result will take O(n<sup>2</sup>) time to get to the solution. Below is an example of my solution.</p>

<figure class='code'><figcaption><span>Brute Force Apple Stock Solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">StockMarket</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">apple_stock</span><span class="p">(</span><span class="n">stock_prices</span><span class="p">)</span>
</span><span class='line'>      <span class="n">max_profit</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">stock_prices</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">buy_price</span><span class="p">,</span> <span class="n">buy_time</span><span class="o">|</span>
</span><span class='line'>        <span class="n">stock_prices</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">sell_price</span><span class="p">,</span> <span class="n">sell_time</span><span class="o">|</span>
</span><span class='line'>          <span class="n">profit</span> <span class="o">=</span> <span class="n">sell_price</span> <span class="o">-</span> <span class="n">buy_price</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">buy_time</span> <span class="o">&lt;</span> <span class="n">sell_time</span> <span class="o">&amp;&amp;</span> <span class="n">profit</span> <span class="o">&gt;</span> <span class="n">max_profit</span>
</span><span class='line'>            <span class="n">max_profit</span> <span class="o">=</span> <span class="n">profit</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span> <span class="n">x</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">max_profit</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Second Solution &ndash; The Greedy Method</h2>

<p>My next solution was iterating through the stock prices only once to look for the optimal solution.  This is done using the greedy method. A greedy algorithm iterates through the problem space taking the optimal solution &ldquo;so far,&rdquo; until it reaches the end. This method leads to only iterating through the problem n times and gives a solution that is O(n) times fast.</p>

<figure class='code'><figcaption><span>Greedy Method Apple Stock Solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">StockMarket</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">apple_stock</span><span class="p">(</span><span class="n">stock_prices</span><span class="p">)</span>
</span><span class='line'>    <span class="n">max_profit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">min_price</span> <span class="o">=</span> <span class="n">stock_prices</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">0</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">stock_prices</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">time</span><span class="o">|</span>
</span><span class='line'>      <span class="n">current_price</span> <span class="o">=</span> <span class="n">stock_prices</span><span class="o">[</span><span class="n">time</span><span class="o">]</span>
</span><span class='line'>      <span class="n">min_price</span> <span class="o">=</span> <span class="n">current_price</span>  <span class="k">if</span> <span class="n">current_price</span> <span class="o">&lt;</span> <span class="n">min_price</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">current_profit</span> <span class="o">=</span> <span class="n">current_price</span> <span class="o">-</span> <span class="n">min_price</span>
</span><span class='line'>      <span class="n">max_profit</span> <span class="o">=</span> <span class="n">current_profit</span> <span class="k">if</span> <span class="n">current_profit</span> <span class="o">&gt;</span> <span class="n">max_profit</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">max_profit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>More About the Greedy Method</h2>

<p>In general, greedy algorithms have five components:</p>

<ol>
<li>A candidate set, from which a solution is created</li>
<li>A selection function, which chooses the best candidate to be added to the solution</li>
<li>A feasibility function, that is used to determine if a candidate can be used to contribute to a solution</li>
<li>An objective function, which assigns a value to a solution, or a partial solution, and</li>
<li>A solution function, which will indicate when we have discovered a complete solution</li>
</ol>


<p>Greedy algorithms help find the optimal solution for some mathematical problems, but not all. This algorithm works best on problems that have two properties:</p>

<h3>Greedy choice property</h3>

<p>We can make whatever choice seems best at the moment and then solve the subproblems that
arise later. The choice made by a greedy algorithm may depend on choices made so far but
not on future choices or all the solutions to the subproblem. It iteratively makes one
greedy choice after another, reducing each given problem into a smaller one. In other words,
a greedy algorithm never reconsiders its choices.</p>

<h3>Optimal substructure</h3>

<p>&ldquo;A problem exhibits optimal substructure if an optimal solution to the problem contains
ptimal solutions to the sub-problems.&rdquo;</p>

<p>Below are a list of more resources to prepare for interviews:</p>

<ul>
<li><a href="http://www.ocf.berkeley.edu/~kelu/interviews/questions.html">http://www.ocf.berkeley.edu/~kelu/interviews/questions.html</a></li>
<li><a href="http://katemats.com/interview-questions/">http://katemats.com/interview-questions/</a></li>
<li><a href="http://meetupresources.herokuapp.com/index.html">http://meetupresources.herokuapp.com/index.html</a></li>
<li><a href="http://codingforinterviews.com/practice">http://codingforinterviews.com/practice</a></li>
<li><a href="https://www.interviewcake.com/">https://www.interviewcake.com/</a></li>
</ul>


<p>Learn more about <a href="https://www.womenwhocode.com/" title="Women Who Code website">Women Who Code</a> and if you are in NYC come checkout a meetup and <a href="http://www.meetup.com/WomenWhoCodeNYC/" title="meetup site">Women Who Code NYC</a>.  The next Algorithm and Interview Prep session is sched</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Industry Trends and Top Companies Using Ruby on Rails]]></title>
    <link href="http://denineguy.github.io/blog/2014/07/17/industry-trends-and-top-companies-using-ruby-on-rails/"/>
    <updated>2014-07-17T01:40:25-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/07/17/industry-trends-and-top-companies-using-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Having spent the last 7 weeks learning Ruby and Ruby on Rails I am slowly beginning to understand its magic and how quickly a web application can be built using Rails.  With this in mind I wanted to better understand why others think this web-application framework is so hot and more importantly I wanted to know what is the growth trend for Ruby on Rails and what companies are using this technology for web applications.  Hey let’s be serious I want to ensure the prospects of finding a job after learning this are feasible.</p>

<!-- more -->


<h2>Why Ruby on Rails is Hot</h2>

<p>Ruby on Rails (RoR) is an open source web application framework written with the Ruby Programming language. It is said that the speed and agility with which applications can be built with Ruby on Rails, results in increased productivity and company growth.  The versatility and speed of Ruby makes it possible to build custom software for app development, allowing businesses have to differentiate themselves, while also creating functional software that makes data collection, visualization and exchange fast and efficient.  Lastly, Ruby on Rails is known to be simpler and cheaper than other traditional web development processes.</p>

<h2>Website Usage and Industry Trends</h2>

<p>All companies ranging from startups to large multinational corporation have begun to realize how fast and effective building web apps with Ruby on Rails is.  As such more companies are using the web frameworking.  According to one estimate there are, over <a href="http://trends.builtwith.com/framework/Ruby-on-Rails" title="Title">600,000</a> websites are running on Ruby on Rails.  Over the past year the number of sites running on Ruby on Rails has increased by approximately 20%.</p>

<h4>Websites Using Rails: Growth Trend</h4>

<p><img src="http://denineguy.github.io/images/growth_trend_rails.png" title="Yearly Growth trend for websites using Ruby on Rails" alt="Websites Using Rails: Growth Trend" /></p>

<p>The below image shows the Top Million websites using Ruby on Rails, broken down into segments. (Top 10k sites, Top 100k site and Top Million sites).  There are approximately 230 sites of the top 10k sites that are currently using Ruby on Rails</p>

<h4>Number of Websites Using Ruby on Rails out of Top Million Sites</h4>

<p><img src="http://denineguy.github.io/images/number_top_sites_rails.png" title="Growth trend for top websites using Ruby on Rails" alt="Top Websites Using Rails: Growth Trend" /></p>

<p>Ruby on Rails usage spans different industries from business to health with business and shopping being the dominant verticals currently utilizing Ruby on Rails. The chart below shows a visual representation of that.</p>

<h4>Website Verticals</h4>

<p><img src="http://denineguy.github.io/images/industry_verticals_rails.png" title="Ruby on Rails Website Verticals" alt="Ruby on Rails Website Verticals" /></p>

<h2>Top Companies</h2>

<p>After discovering that there are a large amount of companies who have adopted Ruby on Rails, I became intrigued and wanted to see what companies were either built with Ruby on Rails and/or are currently using Ruby on Rails.</p>

<ol>
<li><a href="http://www.twitter.com" title="Title">Twitter</a> – Twitter doesn’t use RoR anymore but it was built using Rails. Social Media Site</li>
<li><a href="http://www.shopify.com/" title="Title">Shopify</a> – A platform that let’s you build your own online store</li>
<li><a href="http://www.crunchbase.com/" title="Title">Crunchbase</a> – A free database of technology companies, people, investors that anyone can edit.</li>
<li><a href="http://www.groupon.com/" title="Title">Groupon</a> – A global leader of commerce, offering daily deals</li>
<li><a href="http://www.bloomberg.com/" title="Title">Bloomberg</a> –The global business and financial information and news leader.</li>
<li><a href="https://www.indiegogo.com/" title="Title">Indiegogo</a> – a crowd-funded platform for film, music, technology, charity, gaming etc.</li>
<li><a href="https://www.airbnb.com/" title="Title">Airbnb</a> – is a community marketplace for people to list, discover, and book unique accomodations  around the world.</li>
<li><a href="https://soundcloud.com/" title="Title">Soundcloud</a> &ndash; SoundCloud is an online audio distribution platform based in Berlin, Germany that enables its users to upload, record, promote and share their originally-created sounds.</li>
<li><a href="https://squareup.com/" title="Title">Square</a> – offers and easy way to payment solution, using a white square credit card readers that you can plug into your Android, iPhone or iPad</li>
<li><a href="https://www.heroku.com/" title="Title">Heroku</a>&ndash; a cloud platform as a service supporting several programming languages.</li>
<li><a href="http://www.zendesk.com/" title="Title">Zendesk</a> &ndash; is the leader for integrated on-demand customer support portal solution, based on the latest Web 2.0 technologies and design philosophies</li>
<li><a href="http://www.hulu.com/" title="Title">Hulu</a> – is an online video service that offers a selection of hit shows, clips and movies.</li>
<li><a href="https://github.com/" title="Title">Github</a> &ndash; GitHub is a Git repository web-based hosting service which offers all of the functionality of Git as well as adding many of it&rsquo;s own features.</li>
<li><a href="http://www.slideshare.net/" title="Title">Slideshare</a> &ndash; Offers users the ability to upload and share publicly or privately PowerPoint presentations, Word documents and Adobe PDF Portfolios</li>
<li><a href="https://www.livingsocial.com/" title="Title">Living Social</a> &ndash; features deals on the best things to do in your city, including restaurants, spas, travel, and more, with discounts up to 80% off.</li>
<li><a href="http://www.scribd.com/" title="Title">Scribd</a> &ndash; Unlimited access to 400000+ books with Scribd that can be tead on your iPad, iPhone, Android phone &amp; tablet, or web browser</li>
<li><a href="https://basecamp.com/" title="Title">Basecamp</a> – is a web-based project management tool.</li>
<li><a href="http://www.nytimes.com/" title="Title">New York Times</a></li>
</ol>


<h3>Other Startups who use or have used Ruby on Rails</h3>

<ol>
<li><a href="http://http://www.howaboutwe.com/" title="Title">HowAboutWe</a></li>
<li><a href="http://www.gilt.com/" title="Title">Gilt Groupe</a> &ndash; first version built with RoR</li>
<li><a href="https://www.designerpages.com/" title="Title">Designer Pages</a></li>
<li><a href="https://artsy.net/" title="Title">Art.sy</a></li>
<li><a href="https://www.kickstarter.com/" title="Title">Kickstarter</a></li>
<li><a href="https://www.paperlesspost.com/" title="Title">Paperless Post</a></li>
<li><a href="http://www.bonobos.com/" title="Title">Bonobos</a></li>
<li><a href="https://groupme.com/" title="Title">Group Me</a></li>
<li><a href="http://www.birchbox.com/" title="Title">Birchbox</a></li>
<li><a href="http://www.quirky.com/" title="Title">Quirky</a></li>
</ol>


<p>To learn about more companies using Ruby on Rails visit <a href="http://trends.builtwith.com/framework/Ruby-on-Rails" title="Title">Builtwith</a>.</p>

<p>There are also a number of Ruby on Rails Development companies, such as <a href="http://thoughtbot.com/" title="Title">Thoughtbot</a>. For a list of top Ruby on Rails Development companies click <a href="http://www.thetoptens.com/ruby-rails-development-companies/" title="Title">here</a>.</p>

<h2>Job Trends and Industry Growth</h2>

<p>Based on information from indeed the growth trends for Ruby on Rails developers are very promising. Ruby on Rails developer jobs are promising and the job market will continue to show a high demand for Rails developers.  As more and more companies understand the low-upfront cost and overall cost savings along with ease and speed of development it can be predicted that more and more companies will begin to use Ruby on Rails.</p>

<div style="width:540px">
<a href="http://www.indeed.com/jobtrends?q=Ruby-on-rails" title="Ruby-on-rails Job Trends">
<img width="540" height="300" src="http://www.indeed.com/trendgraph/jobgraph.png?q=Ruby-on-rails" border="0" alt="Ruby-on-rails Job Trends graph">
</a>
<table width="100%" cellpadding="6" cellspacing="0" border="0" style="font-size:80%"><tr>
<td><a href="http://www.indeed.com/jobtrends?q=Ruby-on-rails">Ruby-on-rails Job Trends</a></td>
<td align="right"><a href="http://www.indeed.com/jobs?q=Ruby-on-rails">Ruby-on-rails jobs</a></td>
</tr></table>
</div>




<br>


<br>


<h3>More Resources</h3>

<ul>
<li><a href="http://trends.builtwith.com/framework/Ruby-on-Rails" title="Title">Builtwith</a></li>
<li><a href="http://www.thetoptens.com/ruby-rails-development-companies/" title="Title">Top 10 Ruby on Rails Development Companies</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Password Generating App With Sinatra]]></title>
    <link href="http://denineguy.github.io/blog/2014/07/02/generating-passwords/"/>
    <updated>2014-07-02T00:08:45-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/07/02/generating-passwords</id>
    <content type="html"><![CDATA[<h2>Web Applications with Sinatra</h2>

<p>Over the past week, at The Flatiron School we have been learning about Rack and creating web applications using Sinatra.  Sinatra is a free open source software web application library, that is a domain-specific language written in Ruby, and is dependent on the Rack web service interface.</p>

<!-- more -->


<p>Unlike Ruby on Rails, Sinatra does not follow the typical model-view-controller pattern.  Instead it focuses on quickly creating web applications in Ruby with minimal effort.  After further reading, I discovered that Sinatra is great for creating small apps and is ideal if your controller structure can fit into one or two pages of code. With this in mind, I decided to set it out and try to create my own app.</p>

<h2>My Hatred for Passwords</h2>

<p>I love the internet, always have and always will, but there is one thing in particular that has become increasingly annoying to me and that is the need for passwords on nearly every site.  I mean it has gotten so bad that some companies don’t even let you peruse their site to figure out what they are all about without having to sign in. We know nothing about them but to learn more they have to capture data on us.  I personally think this should be illegal but that is neither here not there.  The reality of the situation is that I can’t keep up with these passwords anymore.  It was so bad at one point that I literally had the same password for every site.  YES I know that is bad, but I just couldn’t think of any better passwords.  I have since started changing them, but am running out of ideas for passwords.  Since it doesn’t seem like the need for passwords on websites are going away anytime soon, I decided to see if I could create a random password generator for myself&hellip;  that is until I figure out a better technology to eliminate the need for passwords altogether.</p>

<p>Please note that my password generator does not produce the most secure passwords at this time.  This is a work in progress and I will continue to develop this app.</p>

<h2>Word-Generator Form</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&#39;/password&#39;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;h3&gt;</span>Please enter two words that are at least 5 letters long<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;first_word&quot;</span><span class="nt">&gt;</span>First Word:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;first_word&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;password[first_word]&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;/br&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;second_word&quot;</span><span class="nt">&gt;</span>Second Word:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;second_word&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;password[second_word]&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;submit&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>First things I didn’t want an extremly abstract password that I wouldn’t remember.  I thought if I set two words that I could manipulate, maybe I will rememeber them a little better. Above is a form that would take in two words of my choice.</p>

<h2>Class Password</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Password</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:first_word</span><span class="p">,</span> <span class="ss">:second_word</span><span class="p">,</span> <span class="ss">:password_generator</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@generator</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">word1</span>
</span><span class='line'>    <span class="n">word_split</span> <span class="o">=</span> <span class="n">first_word</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">scramble</span> <span class="o">=</span> <span class="n">word_split</span><span class="o">.</span><span class="n">permutation</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="p">))</span><span class="o">.</span><span class="n">to_a</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">word2</span>
</span><span class='line'>    <span class="n">word_split</span> <span class="o">=</span> <span class="n">second_word</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">scramble</span> <span class="o">=</span> <span class="n">word_split</span><span class="o">.</span><span class="n">permutation</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">))</span><span class="o">.</span><span class="n">to_a</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">password_generator</span>
</span><span class='line'>    <span class="vi">@generator</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">word1</span><span class="p">,</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="n">word2</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">,</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span><span class="o">].</span><span class="n">join</span>
</span><span class='line'>    <span class="vi">@generator</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then created a Password Class that takes in two words and permutates them. I randomly select a permutation of 2-4 characters for the first word out of several different permutations, and 1-3 characters for the second word.   I then join the two words with random numbers, and a non-word character, which will ultimately generate my password.</p>

<h2>App.rb &ndash; Routes</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">PasswordSinatra</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">App</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">erb</span> <span class="ss">:index</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/word_generator&#39;</span> <span class="k">do</span>
</span><span class='line'>       <span class="n">erb</span> <span class="ss">:word_generator</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;/password&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@password</span> <span class="o">=</span> <span class="no">Password</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="vi">@password</span><span class="o">.</span><span class="n">first_word</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">][</span><span class="ss">:first_word</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@password</span><span class="o">.</span><span class="n">second_word</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">][</span><span class="ss">:second_word</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@password</span><span class="o">.</span><span class="n">password_generator</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">][</span><span class="ss">:password_generator</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">erb</span> <span class="ss">:password</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/password&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">erb</span> <span class="ss">:word_generator</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code above shows my routes, the HTTP method (GET or POST) with the corresponding URL destination when a request is made to the server.  The root goes to my index page.  When the link on the index page is clicked it takes the user to a word generator form page, where the user has to enter two words and click submit. This will ultimately end up on the password page which will show them their newly created password. If a user does not like that password they can either refresh page to generate a new password permutation or go back to the word_generator from and submit two new words to create an entirely new password.</p>

<h2>Screenshots of the Password Generator Application</h2>

<h4>Index Page</h4>

<p><img src="http://denineguy.github.io/images/index_page.png" title="Password Generator Index Page" alt="index page" /></p>

<h4>Word Generator Form Page</h4>

<p><img src="http://denineguy.github.io/images/word_generator.png" title="Word Generator Form Page" alt="word generator form page" /></p>

<h4>Password Page</h4>

<p><img src="http://denineguy.github.io/images/password_generator.png" title="Password Generator Page" alt="password generator page" /></p>

<p>Voila and there it is my very own randomly generated password. <em> pp7sar_10 </em></p>

<p>Well this is my app.  I will continue to improve this app and hope to have it deployed shortly.</p>

<h3>References:</h3>

<p>Here is a great blog post to learn when to Rails vs Sinatra: <a href="http://www.sitepoint.com/rails-or-sinatra-the-best-of-both-worlds/" title="Title">Rails or Sinatra: The Best of Both Worlds</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Programming - Ruby Classes and Objects]]></title>
    <link href="http://denineguy.github.io/blog/2014/06/16/post-object-oriented-programming-ruby-classes-and-objects/"/>
    <updated>2014-06-16T15:37:03-04:00</updated>
    <id>http://denineguy.github.io/blog/2014/06/16/post-object-oriented-programming-ruby-classes-and-objects</id>
    <content type="html"><![CDATA[<p>Ruby is an object oriented programming language modeled around objects rather than &ldquo;actions&rdquo; and data rather than logic. Ruby allows you to define a class that provides a blueprint for the construction of similar objects.</p>

<!-- more -->


<h2>What is a Class</h2>

<p>A class is a way of organizing and providing a blueprint for producing objects with similar attributes and methods.  It should have a single responsibility and its purpose is to define the behavior of an object.  Ruby has several built in classes such as the String Class, Array Class, Integer Class, Hash Class and many more.  Ruby also allows one to define and create your own classes.</p>

<h2>Creating Classes</h2>

<p>A class is defined by the keyword class, the class name, a constant, beginning with a capital letter and followed by the word end. Below is an example of the syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class Objects</h2>

<p>An object is thought of as an instance of the class. in Ruby you can create an object or instance of the class by using the new method, as follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">girl</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Lisa&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">boy</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Gene&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Variable Scope</h2>

<p>Ruby offers 4 types of variables</p>

<ul>
<li><p>Local Variables: Local variable are variables that are defined in a method and not available outside of the method.  Local variables begin with a lower case letter or _.<code>local</code> or <code>_local</code></p></li>
<li><p>Instance Variables: Instance variables are available across methods for any particular instance or object. That means that instance variables change from object to object. Instance variables are preceded by the at sign (@) followed by the variable name. <code>@variable</code></p></li>
<li><p>Class Variables: Class variables are available across different objects. A class variable belongs to the class and is a characteristic of a class. They are preceded by the sign @@ and are followed by the variable name. <code>@@class</code></p></li>
<li><p>Global Variables: Class variables are not available across classes. If you want to have a single variable, which is available across classes, you need to define a global variable. The global variables are always preceded by the dollar sign ($). <code>$global</code></p></li>
</ul>


<h2>New vs Initialize method</h2>

<p>Initialize is a method of the instance that is used to boot up the object once it has been created.  New is a method of the class and is used to create the instance.  When &ldquo;new&rdquo; is called it creates an instance of the class and triggers the initalize method, which tells the object what to do as soon as it is created.   So if I call Person.new it will trigger the initialize method and take in the person name and job and the person will automatically say Hello my name is Danielle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@job</span> <span class="o">=</span> <span class="n">job</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">speak</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello my name is </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">girl</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Danielle, secretary&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Instance vs Class Methods</h2>

<p>Instance methods on the other hand are methods of the instance or object. The speak method above is an example of an instance method. In my example the Instance method defines what a person does when they speak.  Class methods are declared the same way as instance methods, except that they are prefixed by self, or the class name, followed by a period. These methods are executed at the Class level and may be called without an object instance. They cannot access instance variables but do have access to class variables. Below is an example of class methods</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">Person</span><span class="o">.</span><span class="nf">find_by_name</span>
</span><span class='line'>    <span class="c1">#do something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is can also be written using self which is the preferred method for Ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_by_age</span>
</span><span class='line'>    <span class="c1">#do something </span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Attribute Reader Write and Accessor Methods</h2>

<p>An object&rsquo;s instance variables are its attributes, which distinguish one object from other objects of the same class. It is important to be able to write to and read these attributes; doing so requires methods called attribute accessors.  We can use as attr_reader to access a variable and and attr_writer to change it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@job</span> <span class="o">=</span> <span class="n">job</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="c1">#setter method, which sets the value</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>  <span class="c1"># getter method</span>
</span><span class='line'>    <span class="vi">@name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">job</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="c1">#setter method, which sets the value</span>
</span><span class='line'>    <span class="vi">@job</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can also be written more concisely with attr_reader and attr_writer methods which automatically creates the setter and getter methods respectively.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_writer</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:job</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@job</span> <span class="o">=</span> <span class="n">job</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When there is a variable that is both an attr_reader and attr_writer it can be written even more succinctly with an attr_accessor method as follows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_writer</span>  <span class="ss">:job</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@job</span> <span class="o">=</span> <span class="n">job</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Inheritance</h2>

<p>Inheritance is the process by which one class takes on the attributes and methods of another class, the parent class.  Inheritance creates a relationship such that if one object cannot respond to a message it delegates that message to another object.  It should be noted that Ruby does not support multiple inheritance and so a class in Ruby can have only one base or parent class. The The syntax for inheritance is the Derived class, the new class which inherits from the base or parent class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DerivedClass</span> <span class="o">&lt;</span> <span class="no">BaseClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
